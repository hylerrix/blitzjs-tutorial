import projectConfig from '/pagic.config.js';
export default {
    'prev': undefined,
    'next': undefined,
    config: { "root": "/", ...projectConfig, branch: 'main' },
    'pagePath': "articles/blitzjs/blitz-introduction-1.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "articles/blitzjs/blitz-introduction-1.html",
    'title': "Blitz.js 入门教程：基于 Next.js 的下一代 React 全栈框架",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>Blitz.js 入门教程：基于 Next.js 的下一代 React 全栈框架</h1>\n<h2 id="%E8%AF%91%E8%80%85%E5%BA%8F">译者序<a class="anchor" href="#%E8%AF%91%E8%80%85%E5%BA%8F">§</a></h2>\n<p>苦 JS 生态久已。在 2020 年后，一直徘徊于该为自己构建怎样的技术栈，迟迟没有太多落地成果——库太多了，一个小场景就能有很多个解决方案；方向也太多了，哪怕大前端三个字，现今都能拆分为很多的细分领域。直到遇到了 Rome，看到社区已经开始尝试整合重构 Node 生态的前端工具链；又遇到了 Deno，直接摆脱 Node 的历史遗留问题来建设更贴近现代标准的 JavaScript/TypeScript 运行时；现在又遇到了 Blitz.js，一站式 React 全栈框架，在 Next.js 之上赋能更多的后端场景...于是自己的很多方向性问题都豁然开朗：通过建立不同的 Repo 来专攻不同的方向，且每个 Repo 都能有代表性的同时，覆盖更多的场景。于是——</p>\n<ul>\n<li><a href="https://github.com/hylerrix/deno-tutorial">Deno 钻研之术</a>：看未来，学标准。Node 也不落下。</li>\n<li><a href="https://github.com/hylerrix/deno-algorithm">Deno 算法之旅</a>：刷算法，玩测试。</li>\n<li><a href="https://github.com/hylerrix/es-interview">ECMAScript 面试宝典</a>：备面试，打基础；</li>\n<li><a href="https://github.com/hylerrix/blitzjs-tutorial">Blitz.js + React 全栈开发手册</a>：搞工程，尝全栈。深入 React，实战 Next.js，掌握后端开发。</li>\n<li>以及还有一切弃坑的 repo......</li>\n</ul>\n<p>当然，Blitz.js 还有很多吸引人的特性：</p>\n<ul>\n<li><strong>一体式全栈架构</strong>：在一个 Monorepo 里从数据库到用户端全搞定，也没用重复性代码。试想前后端分离的架构下，如果你喜欢 TypeScript 的话，很可能得写两套相同 TS...且这种一体式架构很容易让自己的项目灵感从头到尾地快速落地。</li>\n<li><strong>API 不再必须</strong>：REST 和 GraphQL？或许都不需要，交给 Blitz.js 来在编译时构建。当需要提供 API 给更多端使用时，再结合相关库来生成 API。</li>\n<li><strong>更轻松的开箱体验</strong>：脚手架初始化后直接提供登录注册甚至重置密码功能，直接支持最基本的后端环境，开箱即用的体验不能再好，同时甚至能通过强大的 blitz generate CLI 快速植入生态圈中的主流库到项目中。</li>\n<li><strong>并不会“学不动了”</strong>：基于 Next.js，前端 React，后端 Prisma 等库，Blitz.js 构建于各种已经主流化的生态之上。</li>\n<li><strong>拥抱未来</strong>：Blitz.js 预计将于下个月（2021 年 4 月）发布 v1.0 版本。</li>\n</ul>\n<p>本文属于《<a href="https://github.com/hylerrix/blitzjs-tutorial">Blitz.js + React 全栈开发手册</a>》系列，原文翻译内容会同步更新到 <a href="https://github.com/blitz-js/zh-hans.blitzjs.com">Blitz.js 中文仓库</a> 上。欢迎 Star 和 Watch：<a href="https://github.com/hylerrix/blitzjs-tutorial">https://github.com/hylerrix/blitzjs-tutorial</a>。</p>\n<h2 id="%E5%BF%AB%E9%80%9F%E5%85%A5%E6%89%8B">快速入手<a class="anchor" href="#%E5%BF%AB%E9%80%9F%E5%85%A5%E6%89%8B">§</a></h2>\n<h3 id="%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84%E7%8E%AF%E5%A2%83">配置你的环境<a class="anchor" href="#%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84%E7%8E%AF%E5%A2%83">§</a></h3>\n<p>你需要使用 Node 12 或者更新的版本。</p>\n<h3 id="%E5%AE%89%E8%A3%85-blitz">安装 Blitz<a class="anchor" href="#%E5%AE%89%E8%A3%85-blitz">§</a></h3>\n<p>执行 <code>npm install -g blitz</code></p>\n<h3 id="%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E9%A1%B9%E7%9B%AE">创建一个新项目<a class="anchor" href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E9%A1%B9%E7%9B%AE">§</a></h3>\n<ol>\n<li><code>blitz new myAppName</code></li>\n<li><code>cd myAppName</code></li>\n<li><code>blitz dev</code></li>\n<li>访问你的新项目 <a href="http://localhost:3000">http://localhost:3000</a></li>\n</ol>\n<h3 id="%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0-blitz-%E7%A4%BE%E5%8C%BA-%F0%9F%91%8B">欢迎来到 Blitz 社区 👋<a class="anchor" href="#%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0-blitz-%E7%A4%BE%E5%8C%BA-%F0%9F%91%8B">§</a></h3>\n<p>Blitz 社区是个温暖、安全、多样化、包容也不失有趣的社区！ LGBTQ+、女生和少数派欢迎你们的到来。</p>\n<p><a href="https://discord.blitzjs.com">加入我们的 Discord 社区</a>，我们会在这里帮助每个人搭建 Blitz 应用。这里也是我们协作共建 Blitz 本身的重要场地。</p>\n<p>对于提问以及会花费较长时间的讨论，<a href="https://github.com/blitz-js/blitz/discussions">可以发帖到我们的论坛中</a>。</p>\n<p>有关完整的介绍，请阅读 社区是如何运作的。文中包括了如何获得帮助、如何报告错误以及如何提出新功能建议等的详细指导。</p>\n<p><strong>欢迎你的帮助来使 Blitz 变得更好！ 🤝</strong></p>\n<p>我们有一个很棒的社区正在共同努力让 Blitz 成为世界上一流的框架。</p>\n<p>你该如何提供帮助：</p>\n<ol>\n<li>通过 <a href="https://github.com/blitz-js/blitz/issues/new/choose">在 GitHub 上提交 issue</a> 来反馈 Bug。</li>\n<li>贡献代码： 阅读贡献指南，以了解如何开始。</li>\n<li><a href="https://github.com/blitz-js/blitz#sponsors-and-donations">赞助 &amp; 捐赠</a>，可以从 $5/月 开始。</li>\n<li>以及你觉得可以的其它任何方式！我们非常感谢你的任何贡献（如文档、视频、博客等）。如果你遇到任何阻碍，欢迎来 Discord 上与我们交流！:)</li>\n</ol>\n<h3 id="%E4%B8%8B%E4%B8%80%E6%AD%A5">下一步<a class="anchor" href="#%E4%B8%8B%E4%B8%80%E6%AD%A5">§</a></h3>\n<h4 id="%E6%95%99%E7%A8%8B">教程<a class="anchor" href="#%E6%95%99%E7%A8%8B">§</a></h4>\n<p>教程篇 是有关 Blitz 所有基本内容的完整练习，其中包括将模型添加到数据库以及从前端读取和更新数据。</p>\n<h4 id="%E5%AD%A6%E4%B9%A0">学习<a class="anchor" href="#%E5%AD%A6%E4%B9%A0">§</a></h4>\n<p>这里有你想要熟悉的 Blitz 的关键概念：</p>\n<ul>\n<li>如何 新建页面</li>\n<li>如何 使用文件路由系统</li>\n<li>如何设置并 使用数据库</li>\n<li>如何使用 Blitz Queries 和 Mutations 来读写你的数据库。</li>\n<li>如何通过 <code>blitz generate</code> 命令来用脚手架生成数据库模型\n的所有代码。</li>\n</ul>\n<h2 id="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B">入门教程<a class="anchor" href="#%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B">§</a></h2>\n<p>在本教程中，我们将会指导你创建一个简易的投票系统。</p>\n<p>我们将假设你已经 安装了 Blitz。你可以通过在终端运行以下命令来确定 Blitz 是否已经安装或检查安装的版本号：</p>\n<pre class="language-bash"><code class="language-bash">blitz -v\n</code></pre>\n<p>如果 Blitz 已经安装成功，你应该能看到安装的版本号。否则你会收到一条像这样的错误提示：“command not found: blitz”。</p>\n<h3 id="%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E5%BA%94%E7%94%A8">创建一个新应用<a class="anchor" href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E5%BA%94%E7%94%A8">§</a></h3>\n<p>在命令行中，<code>cd</code> 进入你想要创建应用的根目录文件夹后，执行以下命令：</p>\n<pre class="language-autoit"><code class="language-autoit">blitz new my<span class="token operator">-</span>blitz<span class="token operator">-</span>app\n</code></pre>\n<p>Blitz 会在你当前的文件夹中创建一个 <code>my-blitz-app</code> 文件夹。你接着会收到一个选择表单库的提示。本教程中将选择其中推荐的 <code>React Final Form</code> 库。</p>\n<p>让我们看看 <code>blitz new</code> 命令创建了什么：</p>\n<pre class="language-markdown"><code class="language-markdown">my-blitz-app\n├── app/\n│   ├── api/\n│   ├── auth/\n│   │   ├── components/\n│   │   │   ├── LoginForm.tsx\n│   │   │   └── SignupForm.tsx\n│   │   ├── mutations/\n│   │   │   ├── changePassword.ts\n│   │   │   ├── forgotPassword.test.ts\n│   │   │   ├── forgotPassword.ts\n│   │   │   ├── login.ts\n│   │   │   ├── logout.ts\n│   │   │   ├── resetPassword.test.ts\n│   │   │   ├── resetPassword.ts\n│   │   │   └── signup.ts\n│   │   ├── pages/\n│   │   │   ├── forgot-password.tsx\n│   │   │   ├── login.tsx\n│   │   │   ├── reset-password.tsx\n│   │   │   └── signup.tsx\n│   │   └── validations.ts\n│   ├── core/\n│   │   ├── components/\n│   │   │   ├── Form.tsx\n│   │   │   └── LabeledTextField.tsx\n│   │   ├── hooks/\n│   │   │   └── useCurrentUser.ts\n│   │   └── layouts/\n│   │       └── Layout.tsx\n│   ├── pages/\n│   │   ├── 404.tsx\n│   │   ├── _app.tsx\n│   │   ├── _document.tsx\n│   │   ├── index.test.tsx\n│   │   └── index.tsx\n│   └── users/\n│       └── queries/\n│           └── getCurrentUser.ts\n├── db/\n│   ├── index.ts\n│   ├── schema.prisma\n│   └── seeds.ts\n├── integrations/\n├── mailers/\n│   └── forgotPasswordMailer.ts\n├── public/\n│   ├── favicon.ico*\n│   └── logo.png\n├── test/\n│   ├── setup.ts\n│   └── utils.tsx\n├── README.md\n├── babel.config.js\n├── blitz.config.js\n├── jest.config.js\n├── package.json\n├── tsconfig.json\n├── types.d.ts\n├── types.ts\n└── yarn.lock\n</code></pre>\n<p>上述文件有：</p>\n<ul>\n<li><code>app/</code> 文件夹是项目中绝大多数功能的容器。你可以在这里放置任何页面或 API 路由。</li>\n<li><code>app/pages/</code> 文件夹是主要的页面文件夹。如果你使用过 Next.js 你将会立即注意到两者的不同。在 Blitz 中，你可以有许多 <code>pages</code> 文件夹，它们将在构建时合并在一起。</li>\n<li><code>app/core/</code> 文件夹是放置整个应用中使用到的通用组件、Hooks 等的主要位置。</li>\n<li><code>db/</code> 是数据库配置所在的位置。如果你正在编写模型或检查迁移情况，可以来这里。</li>\n<li><code>public/</code> 文件夹可以让你放置任何静态资源。如果你有要在应用中使用的图像、文件或视频等，都可以放置在其中。</li>\n<li><code>.babelrc.js</code>、<code>.env</code> 等（“dotfiles 文件”）是各种 JavaScript 工具需要用到的配置文件。</li>\n<li><code>blitz.config.js</code> 用于 Blitz 的高级自定义配置，与 <code>next.config.js</code> 相同</li>\n<li><code>tsconfig.json</code> 是我们推荐的 TypeScript 设置。</li>\n</ul>\n<h3 id="%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%9C%8D%E5%8A%A1%E5%99%A8">开发环境服务器<a class="anchor" href="#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%9C%8D%E5%8A%A1%E5%99%A8">§</a></h3>\n<p>现在，如果你还没有在 <code>my-blitz-app</code> 文件夹下，确保切换到其中，并运行以下命令：</p>\n<pre class="language-autoit"><code class="language-autoit">blitz dev\n</code></pre>\n<p>你将会在命令行中看到如下输出：</p>\n<pre class="language-autoit"><code class="language-autoit">✔ Compiled\nLoaded env from <span class="token operator">/</span>private<span class="token operator">/</span>tmp<span class="token operator">/</span>my<span class="token operator">-</span>blitz<span class="token operator">-</span>app<span class="token operator">/</span><span class="token punctuation">.</span>env\nwarn  <span class="token operator">-</span> You have enabled experimental <span class="token function">feature</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>\nwarn  <span class="token operator">-</span> Experimental features are <span class="token operator">not</span> covered by semver<span class="token punctuation">,</span> <span class="token operator">and</span> may cause unexpected <span class="token operator">or</span> broken application behavior<span class="token punctuation">.</span> Use them at your own risk<span class="token punctuation">.</span>\n\nready <span class="token operator">-</span> started server on <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token punctuation">:</span><span class="token number">3000</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">3000</span>\ninfo  <span class="token operator">-</span> Using external babel configuration from <span class="token operator">/</span>my<span class="token operator">-</span>blitz<span class="token operator">-</span>app<span class="token operator">/</span>babel<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js\nevent <span class="token operator">-</span> compiled successfully\n</code></pre>\n<p>现在服务器已成功运行，浏览器中访问 <a href="http://localhost:3000">localhost:3000</a>。你将会看到带有 Blitz logo 的欢迎页面。成功了！</p>\n<h3 id="%E4%BB%A5%E7%94%A8%E6%88%B7%E8%BA%AB%E4%BB%BD%E6%B3%A8%E5%86%8C">以用户身份注册<a class="anchor" href="#%E4%BB%A5%E7%94%A8%E6%88%B7%E8%BA%AB%E4%BB%BD%E6%B3%A8%E5%86%8C">§</a></h3>\n<p>Bliz 应用让用户登录和注册开箱即用！现在让我们来尝试一下。点击 <strong>注册</strong> 按钮，输入任何电子邮件和密码，然后单击 <strong>创建账户</strong> 后，你将被重定向到用户主页，并在其中可以看到你的用户 <code>id</code> 和 <code>role</code>。</p>\n<p>如果需要，你也可以尝试注销并重新登录。或在登录页面上单击 <strong>忘记密码</strong>，以尝试重置密码流程。</p>\n<h3 id="%E7%BC%96%E5%86%99%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2">编写你的第一个页面<a class="anchor" href="#%E7%BC%96%E5%86%99%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2">§</a></h3>\n<p>接下来让我们创建你的第一个页面。</p>\n<p>打开 <code>app/pages/index.tsx</code> 文件然后替换掉 <code>Home</code> 组件的所有内容为这段代码：</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token comment">//...</span>\n\n<span class="token keyword">const</span> <span class="token maybe-class-name">Home</span><span class="token operator">:</span> <span class="token function-variable function"><span class="token maybe-class-name">BlitzPage</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello, world!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Loading...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//...</span>\n</code></pre>\n<p>保存文件后你将会看到浏览器页面进行了更新。你可以如你所愿地添加需要的各种自\n定义项，。准备就绪后，请转到下一节。</p>\n<h3 id="%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE">数据库配置<a class="anchor" href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE">§</a></h3>\n<p>好消息是，已经为你建立好了 SQLite 数据库！你可以在终端中运行 <code>blitz prisma studio</code> 来打开一个可以查看数据库数据的 Web 界面。</p>\n<p>请注意，在开始第一个实际项目时，你可能希望使用可扩展性更高的数据库（如 PostgreSQL），以避免在将来切换数据库时产生的麻烦。有关更多信息，请参见 数据库概述 篇。目前，我们将继续使用默认的 SQLite 数据库。</p>\n<h3 id="%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6%E4%BB%A3%E7%A0%81">模型的脚手架代码<a class="anchor" href="#%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6%E4%BB%A3%E7%A0%81">§</a></h3>\n<p>Blitz 提供了一个方便的 CLI 命令 <code>generate</code> 来构建样板代码。我们将使用 <code>generate</code> 来创建两个模型：<code>Question</code>（问题） 和 <code>Choice</code>（选择）。<code>Question</code> 包含问题内容和选择列表。<code>Choice</code> 包含选择内容、投票计数以及相关的问题。Blitz 将为这两个模型自动生成一个 id、一个创建时间戳以及一个最新更新的时间戳。</p>\n<h4 id="%E9%A6%96%E5%85%88%E6%88%91%E4%BB%AC%E5%B0%86%E7%94%9F%E6%88%90%E4%B8%8E-question-%E6%A8%A1%E5%9E%8B%E6%9C%89%E5%85%B3%E7%9A%84%E6%89%80%E6%9C%89%E4%BF%A1%E6%81%AF">首先，我们将生成与 <code>Question</code> 模型有关的所有信息：<a class="anchor" href="#%E9%A6%96%E5%85%88%E6%88%91%E4%BB%AC%E5%B0%86%E7%94%9F%E6%88%90%E4%B8%8E-question-%E6%A8%A1%E5%9E%8B%E6%9C%89%E5%85%B3%E7%9A%84%E6%89%80%E6%9C%89%E4%BF%A1%E6%81%AF">§</a></h4>\n<pre class="language-bash"><code class="language-bash">blitz generate all question text:string\n</code></pre>\n<p>当出现提示框时，按 <strong>Enter</strong> 以运行 <code>prisma migrate</code>，这将使用新的模型来更新你的数据库架构。此时会要求一个名称，可以输入“add question”之类的值。</p>\n<pre class="language-bash"><code class="language-bash">CREATE    app/pages/questions/<span class="token punctuation">[</span>questionId<span class="token punctuation">]</span>.tsx\nCREATE    app/pages/questions/<span class="token punctuation">[</span>questionId<span class="token punctuation">]</span>/edit.tsx\nCREATE    app/pages/questions/index.tsx\nCREATE    app/pages/questions/new.tsx\nCREATE    app/questions/components/QuestionForm.tsx\nCREATE    app/questions/queries/getQuestion.ts\nCREATE    app/questions/queries/getQuestions.ts\nCREATE    app/questions/mutations/createQuestion.ts\nCREATE    app/questions/mutations/deleteQuestion.ts\nCREATE    app/questions/mutations/updateQuestion.ts\n\n✔ Model <span class="token keyword">for</span> <span class="token string">\'question\'</span> created <span class="token keyword">in</span> schema.prisma:\n\n<span class="token operator">></span> model Question <span class="token punctuation">{</span>\n<span class="token operator">></span>   <span class="token function">id</span>        Int      @default<span class="token punctuation">(</span>autoincrement<span class="token punctuation">(</span><span class="token punctuation">))</span> @id\n<span class="token operator">></span>   createdAt DateTime @default<span class="token punctuation">(</span>now<span class="token punctuation">(</span><span class="token punctuation">))</span>\n<span class="token operator">></span>   updatedAt DateTime @updatedAt\n<span class="token operator">></span>   text      String\n<span class="token operator">></span> <span class="token punctuation">}</span>\n\n? Run <span class="token string">\'prisma migrate dev\'</span> to update your database? <span class="token punctuation">(</span>Y/n<span class="token punctuation">)</span> › <span class="token boolean">true</span>\n</code></pre>\n<pre class="language-bash"><code class="language-bash">Environment variables loaded from .env\nPrisma schema loaded from db/schema.prisma\nDatasource <span class="token string">"db"</span><span class="token builtin class-name">:</span> SQLite database <span class="token string">"db.sqlite"</span> at <span class="token string">"file:./db.sqlite"</span>\n\n✔ Name of migration … <span class="token function">add</span> question\nThe following migration<span class="token punctuation">(</span>s<span class="token punctuation">)</span> have been created and applied from new schema changes:\n\nmigrations/\n  └─ 20210217035805_add_question/\n    └─ migration.sql\n\n✔ Generated Prisma Client <span class="token punctuation">(</span><span class="token number">2.17</span>.0<span class="token punctuation">)</span> to ./<a class="token email-link" href="mailto:node_modules/@prisma">node_modules/@prisma</a>/client <span class="token keyword">in</span> 103ms\n\nEverything is now <span class="token keyword">in</span> sync.\n</code></pre>\n<p><code>generate</code> 命令搭配 <code>all</code> 类型将生成相关的模型、queries、mutation 和页面文件。请参见 Blitz generate 页面查询更多可用的类型选项。</p>\n<h4 id="%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%88%91%E4%BB%AC%E5%B0%86%E7%94%9F%E6%88%90%E5%B8%A6%E6%9C%89%E7%9B%B8%E5%BA%94-queries-%E5%92%8C-mutations-%E7%9A%84-choice-%E6%A8%A1%E5%9E%8B">接下来，我们将生成带有相应 queries 和 mutations 的 <code>Choice</code> 模型。<a class="anchor" href="#%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%88%91%E4%BB%AC%E5%B0%86%E7%94%9F%E6%88%90%E5%B8%A6%E6%9C%89%E7%9B%B8%E5%BA%94-queries-%E5%92%8C-mutations-%E7%9A%84-choice-%E6%A8%A1%E5%9E%8B">§</a></h4>\n<p>这次我们搭配 <code>resource</code> 类型，因为我们不需要为 <code>Choice</code> 模型生成页面：</p>\n<pre class="language-bash"><code class="language-bash">blitz generate resource choice text votes:int:default<span class="token operator">=</span><span class="token number">0</span> belongsTo:question\n</code></pre>\n<p>同样，在系统提示你进行迁移时，按 <strong>Enter</strong> 后输入迁移的名称。</p>\n<pre class="language-bash"><code class="language-bash">CREATE    app/choices/queries/getChoice.ts\nCREATE    app/choices/queries/getChoices.ts\nCREATE    app/choices/mutations/createChoice.ts\nCREATE    app/choices/mutations/deleteChoice.ts\nCREATE    app/choices/mutations/updateChoice.ts\n\n✔ Model <span class="token keyword">for</span> <span class="token string">\'choice\'</span> created <span class="token keyword">in</span> schema.prisma:\n\n<span class="token operator">></span> model Choice <span class="token punctuation">{</span>\n<span class="token operator">></span>   <span class="token function">id</span>         Int      @default<span class="token punctuation">(</span>autoincrement<span class="token punctuation">(</span><span class="token punctuation">))</span> @id\n<span class="token operator">></span>   createdAt  DateTime @default<span class="token punctuation">(</span>now<span class="token punctuation">(</span><span class="token punctuation">))</span>\n<span class="token operator">></span>   updatedAt  DateTime @updatedAt\n<span class="token operator">></span>   text       String\n<span class="token operator">></span>   votes      Int      @default<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token operator">></span>   question   Question @relation<span class="token punctuation">(</span>fields: <span class="token punctuation">[</span>questionId<span class="token punctuation">]</span>, references: <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token operator">></span>   questionId Int\n<span class="token operator">></span> <span class="token punctuation">}</span>\n\n? Run <span class="token string">\'prisma migrate dev\'</span> to update your database? <span class="token punctuation">(</span>Y/n<span class="token punctuation">)</span> › <span class="token boolean">true</span>\n</code></pre>\n<h4 id="%E6%9C%80%E5%90%8E%E8%AE%A9%E6%88%91%E4%BB%AC%E6%9B%B4%E6%96%B0-question-%E6%A8%A1%E5%9E%8B%E4%BB%A5%E5%85%B3%E8%81%94%E5%88%B0-choice-%E4%B8%8A">最后，让我们更新 <code>Question</code> 模型以关联到 <code>Choice</code> 上。<a class="anchor" href="#%E6%9C%80%E5%90%8E%E8%AE%A9%E6%88%91%E4%BB%AC%E6%9B%B4%E6%96%B0-question-%E6%A8%A1%E5%9E%8B%E4%BB%A5%E5%85%B3%E8%81%94%E5%88%B0-choice-%E4%B8%8A">§</a></h4>\n<p>打开 <code>db/schema.prisma</code> 并在 <code>Question</code> 模型中添加 <code>choices Choice[]</code>。</p>\n<pre class="language-diff"><code class="language-diff">model Question {\n<span class="token unchanged"><span class="token prefix unchanged"> </span> id        Int      @id @default(autoincrement())\n<span class="token prefix unchanged"> </span> createdAt DateTime @default(now())\n<span class="token prefix unchanged"> </span> updatedAt DateTime @updatedAt\n<span class="token prefix unchanged"> </span> text      String\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span> choices   Choice[]\n</span>}\n</code></pre>\n<p>然后运行 <code>blitz prisma generate</code> 来更新 prisma 客户端以同步 schema 的更改。这里不涉及数据库迁移，因为数据库中没有实际字段添加到 <code>Question</code> 模型中。</p>\n<h3 id="%E8%AE%BF%E9%97%AE-prisma-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%A2%E6%88%B7%E7%AB%AF">访问 Prisma 数据库客户端<a class="anchor" href="#%E8%AE%BF%E9%97%AE-prisma-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%A2%E6%88%B7%E7%AB%AF">§</a></h3>\n<p>现在，让我们跳进 Blitz 交互式 Shell 中，并使用 Blitz 为你提供的 Primsa 数据库客户端。要启动 Blitz 控制台，请使用以下命令：</p>\n<pre class="language-bash"><code class="language-bash">blitz console\n</code></pre>\n<p>一旦你进入控制台后，浏览数据库客户端：</p>\n<pre class="language-bash"><code class="language-bash"><span class="token comment"># No questions are in the system yet.</span>\n⚡ <span class="token operator">></span> await db.question.findMany<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n<span class="token comment"># Create a new Question:</span>\n⚡ <span class="token operator">></span> <span class="token builtin class-name">let</span> q <span class="token operator">=</span> await db.question.create<span class="token punctuation">(</span><span class="token punctuation">{</span>data: <span class="token punctuation">{</span>text: <span class="token string">"What\'s new?"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\nundefined\n\n<span class="token comment"># See the entire object:</span>\n⚡ <span class="token operator">></span> q\n<span class="token punctuation">{</span>\n  id: <span class="token number">1</span>,\n  createdAt: <span class="token number">2020</span>-06-15T15:06:14.959Z,\n  updatedAt: <span class="token number">2020</span>-06-15T15:06:14.959Z,\n  text: <span class="token string">"What\'s new?"</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment"># Or, access individual values on the object:</span>\n⚡ <span class="token operator">></span> q.text\n<span class="token string">"What\'s new?"</span>\n\n<span class="token comment"># Change values by using the update function:</span>\n⚡ <span class="token operator">></span> q <span class="token operator">=</span> await db.question.update<span class="token punctuation">(</span><span class="token punctuation">{</span>where: <span class="token punctuation">{</span>id: <span class="token number">1</span><span class="token punctuation">}</span>, data: <span class="token punctuation">{</span>text: <span class="token string">"What\'s up?"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n  id: <span class="token number">1</span>,\n  createdAt: <span class="token number">2020</span>-06-15T15:06:14.959Z,\n  updatedAt: <span class="token number">2020</span>-06-15T15:13:17.394Z,\n  text: <span class="token string">"What\'s up?"</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment"># db.question.findMany() now displays all the questions in the database:</span>\n⚡ <span class="token operator">></span> await db.question.findMany<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    id: <span class="token number">1</span>,\n    createdAt: <span class="token number">2020</span>-06-15T15:06:14.959Z,\n    updatedAt: <span class="token number">2020</span>-06-15T15:13:17.394Z,\n    text: <span class="token string">"What\'s up?"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 id="%E6%9B%B4%E6%96%B0%E6%A8%A1%E5%9E%8B%E5%B1%9E%E6%80%A7%E7%94%9F%E6%88%90%E7%9A%84%E4%BB%A3%E7%A0%81">更新模型属性生成的代码<a class="anchor" href="#%E6%9B%B4%E6%96%B0%E6%A8%A1%E5%9E%8B%E5%B1%9E%E6%80%A7%E7%94%9F%E6%88%90%E7%9A%84%E4%BB%A3%E7%A0%81">§</a></h3>\n<blockquote>\n<p>在再次运行该应用之前，我们需要自定义一些已生成的代码。最终这些修复过程将不再需要——但就目前而言，我们需要解决结果未解决的问题。</p>\n</blockquote>\n<p>自动生成的页面，当前并未使用你在生成过程中定义的实际模型的属性。以后会支持，但现在，需要我们手动修复生成的页面。</p>\n<h4 id="question-%E9%A1%B5%E9%9D%A2">Question 页面<a class="anchor" href="#question-%E9%A1%B5%E9%9D%A2">§</a></h4>\n<p>进入 <code>app/pages/questions/index.tsx</code>. 请注意到一个 <code>QuestionsList</code> 组件已经为你生成了：</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token comment">// app/pages/questions/index.tsx</span>\n\n<span class="token keyword module">export</span> <span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">QuestionsList</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token property-access">query</span><span class="token punctuation">.</span><span class="token property-access">page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>questions<span class="token punctuation">,</span> hasMore<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">usePaginatedQuery</span><span class="token punctuation">(</span>getQuestions<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    orderBy<span class="token operator">:</span> <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token string">"asc"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    skip<span class="token operator">:</span> <span class="token constant">ITEMS_PER_PAGE</span> <span class="token operator">*</span> page<span class="token punctuation">,</span>\n    take<span class="token operator">:</span> <span class="token constant">ITEMS_PER_PAGE</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">goToPreviousPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> router<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>query<span class="token operator">:</span> <span class="token punctuation">{</span>page<span class="token operator">:</span> page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">goToNextPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> router<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>query<span class="token operator">:</span> <span class="token punctuation">{</span>page<span class="token operator">:</span> page <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token punctuation">{</span>questions<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">question</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>question<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/questions/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>question<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>question<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>page <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>goToPreviousPage<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        Previous\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token operator">!</span>hasMore<span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>goToNextPage<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        Next\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>不过目前跑不通的！请记住我们创建的 <code>Question</code> 模型上面没有任何“name”字段。\n要解决此问题，请替换 <code>question.name</code> 为 <code>question.text</code>。</p>\n<pre class="language-diff"><code class="language-diff">// app/pages/questions/index.tsx\n\nexport const QuestionsList = () => {\n<span class="token unchanged"><span class="token prefix unchanged"> </span> const router = useRouter()\n<span class="token prefix unchanged"> </span> const page = Number(router.query.page) || 0\n<span class="token prefix unchanged"> </span> const [{questions, hasMore}] = usePaginatedQuery(getQuestions, {\n<span class="token prefix unchanged"> </span>   orderBy: {id: "asc"},\n<span class="token prefix unchanged"> </span>   skip: ITEMS_PER_PAGE * page,\n<span class="token prefix unchanged"> </span>   take: ITEMS_PER_PAGE,\n<span class="token prefix unchanged"> </span> })\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span> const goToPreviousPage = () => router.push({query: {page: page - 1}})\n<span class="token prefix unchanged"> </span> const goToNextPage = () => router.push({query: {page: page + 1}})\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span> return (\n<span class="token prefix unchanged"> </span>   &lt;div>\n<span class="token prefix unchanged"> </span>     &lt;ul>\n<span class="token prefix unchanged"> </span>       {questions.map((question) => (\n<span class="token prefix unchanged"> </span>         &lt;li key={question.id}>\n<span class="token prefix unchanged"> </span>           &lt;Link href={`/questions/${question.id}`}>\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>              &lt;a>{question.name}&lt;/a>\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>              &lt;a>{question.text}&lt;/a>\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span>           &lt;/Link>\n<span class="token prefix unchanged"> </span>         &lt;/li>\n<span class="token prefix unchanged"> </span>       ))}\n<span class="token prefix unchanged"> </span>     &lt;/ul>\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span>     &lt;button disabled={page === 0} onClick={goToPreviousPage}>\n<span class="token prefix unchanged"> </span>       Previous\n<span class="token prefix unchanged"> </span>     &lt;/button>\n<span class="token prefix unchanged"> </span>     &lt;button disabled={!hasMore} onClick={goToNextPage}>\n<span class="token prefix unchanged"> </span>       Next\n<span class="token prefix unchanged"> </span>     &lt;/button>\n<span class="token prefix unchanged"> </span>   &lt;/div>\n<span class="token prefix unchanged"> </span> )\n</span>}\n</code></pre>\n<p>接下来，我们将类似的修复方法应用于 <code>app/questions/components/QuestionForm.tsx</code> 中。在表单提交中，将 <code>LabeledTextField</code> 中 <code>name</code> 变为 <code>text</code>。</p>\n<pre class="language-diff"><code class="language-diff">export function QuestionForm&lt;S extends z.ZodType&lt;any, any>>(\n<span class="token unchanged"><span class="token prefix unchanged"> </span> props: FormProps&lt;S>,\n</span>) {\n<span class="token unchanged"><span class="token prefix unchanged"> </span> return (\n<span class="token prefix unchanged"> </span>   &lt;Form&lt;S> {...props}>\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>     &lt;LabeledTextField name="name" label="Name" placeholder="Name" />\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>     &lt;LabeledTextField name="text" label="Text" placeholder="Text" />\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span>   &lt;/Form>\n<span class="token prefix unchanged"> </span> )\n</span>}\n</code></pre>\n<h4 id="createquestion-mutation"><code>createQuestion</code> mutation<a class="anchor" href="#createquestion-mutation">§</a></h4>\n<p>在 <code>app/questions/mutations/createQuestion.ts</code> 中，我们需要更新 <code>CreateQuestion</code> zod 验证模式，使用 <code>text</code> 而不是 <code>name</code>。</p>\n<pre class="language-diff"><code class="language-diff">// app/questions/mutations/createQuestion.ts\n\nconst CreateQuestion = z\n<span class="token unchanged"><span class="token prefix unchanged"> </span> .object({\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>   name: z.string(),\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>   text: z.string(),\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span> })\n<span class="token prefix unchanged"> </span> .nonstrict()\n</span>// ...\n</code></pre>\n<h4 id="updatequestion-mutation"><code>updateQuestion</code> mutation<a class="anchor" href="#updatequestion-mutation">§</a></h4>\n<p>在 <code>app/questions/mutations/updateQuestion.ts</code> 中，我们需要更新 <code>UpdateQuestion</code> zod 验证模式，使用 <code>text</code> 而不是 <code>name</code>。</p>\n<pre class="language-diff"><code class="language-diff">// app/questions/mutations/updateQuestion.ts\n\nconst UpdateQuestion = z\n<span class="token unchanged"><span class="token prefix unchanged"> </span> .object({\n<span class="token prefix unchanged"> </span>   id: z.number(),\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>   name: z.string(),\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>   text: z.string(),\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span> })\n<span class="token prefix unchanged"> </span> .nonstrict()\n</span>// ...\n</code></pre>\n<h4 id="deletequestion-mutation"><code>deleteQuestion</code> mutation<a class="anchor" href="#deletequestion-mutation">§</a></h4>\n<p>Prisma 尚不支持“级联删除”。在本教程的上下文中，这意味着它在删除 <code>Question</code> 时不会删除相关的 <code>Choice</code>数据。我们需要临时改动生成的 <code>deleteQuestion</code> mutation，以便手动做这件事。在文本编辑框中打开 <code>app/questions/mutations/deleteQuestion.ts</code> 并将以下内容添加到函数主体的顶\n部。</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">await</span> db<span class="token punctuation">.</span>choice<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span>where<span class="token operator">:</span> <span class="token punctuation">{</span>questionId<span class="token operator">:</span> id<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>最终的效果应该为：</p>\n<pre class="language-diff"><code class="language-diff">// app/questions/mutations/deleteQuestion.ts\n\nexport default resolver.pipe(\n<span class="token unchanged"><span class="token prefix unchanged"> </span> resolver.zod(DeleteQuestion),\n<span class="token prefix unchanged"> </span> resolver.authorize(),\n<span class="token prefix unchanged"> </span> async ({id}) => {\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>   await db.choice.deleteMany({where: {questionId: id}})\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span>   const question = await db.question.deleteMany({where: {id}})\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span>   return question\n<span class="token prefix unchanged"> </span> },\n</span>)\n</code></pre>\n<p>现在，此 mutation 将在删除问题本身之前，删除与问题相关的选择。</p>\n<h4 id="%E7%8E%B0%E5%9C%A8%E5%B0%9D%E8%AF%95%E5%88%9B%E5%BB%BA%E6%9B%B4%E6%96%B0%E5%92%8C%E5%88%A0%E9%99%A4%E9%97%AE%E9%A2%98">现在尝试创建、更新和删除问题<a class="anchor" href="#%E7%8E%B0%E5%9C%A8%E5%B0%9D%E8%AF%95%E5%88%9B%E5%BB%BA%E6%9B%B4%E6%96%B0%E5%92%8C%E5%88%A0%E9%99%A4%E9%97%AE%E9%A2%98">§</a></h4>\n<p>太棒了！现在确保你的程序正常运行。否则在你的终端中执行 <code>blitz dev</code>，然后访问 <code>localhost:3000/questions</code>。尝试创建问题并编辑、删除它们。</p>\n<h3 id="%E5%9C%A8%E9%97%AE%E9%A2%98%E8%A1%A8%E6%A0%BC%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%80%89%E6%8B%A9%E9%A1%B9">在问题表格中添加选择项<a class="anchor" href="#%E5%9C%A8%E9%97%AE%E9%A2%98%E8%A1%A8%E6%A0%BC%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%80%89%E6%8B%A9%E9%A1%B9">§</a></h3>\n<p>到目前为止，你做的很棒！我们要做的下一件事是在我们的问题中添加选择。在你的编辑器中打开 <code>app/questions/components/QuestionForm.tsx</code>。</p>\n<p>添加另外三个 <code>&lt;LabeledTextField&gt;</code> 组件作为选择。</p>\n<pre class="language-diff"><code class="language-diff">export function QuestionForm&lt;S extends z.ZodType&lt;any, any>>(\n<span class="token unchanged"><span class="token prefix unchanged"> </span> props: FormProps&lt;S>,\n</span>) {\n<span class="token unchanged"><span class="token prefix unchanged"> </span> return (\n<span class="token prefix unchanged"> </span>   &lt;Form&lt;S> {...props}>\n<span class="token prefix unchanged"> </span>     &lt;LabeledTextField name="text" label="Text" placeholder="Text" />\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>     &lt;LabeledTextField name="choices.0.text" label="Choice 1" />\n<span class="token prefix inserted">+</span>     &lt;LabeledTextField name="choices.1.text" label="Choice 2" />\n<span class="token prefix inserted">+</span>     &lt;LabeledTextField name="choices.2.text" label="Choice 3" />\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span>   &lt;/Form>\n<span class="token prefix unchanged"> </span> )\n</span>}\n</code></pre>\n<p>现在打开 <code>app/pages/questions/new.tsx</code> 并设置 <code>initialValues</code> 为如下：</p>\n<pre class="language-diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span>     &lt;QuestionForm\n<span class="token prefix unchanged"> </span>       submitText="Create Question"\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>       // initialValues={{ }}\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>       initialValues={{choices: []}}\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span>       onSubmit={async (values) => {\n<span class="token prefix unchanged"> </span>         try {\n<span class="token prefix unchanged"> </span>           const question = await createQuestionMutation(values)\n<span class="token prefix unchanged"> </span>           router.push(`/questions/${question.id}`)\n<span class="token prefix unchanged"> </span>         } catch (error) {\n<span class="token prefix unchanged"> </span>           console.error(error)\n<span class="token prefix unchanged"> </span>           return {\n<span class="token prefix unchanged"> </span>             [FORM_ERROR]: error.toString(),\n<span class="token prefix unchanged"> </span>           }\n<span class="token prefix unchanged"> </span>         }\n<span class="token prefix unchanged"> </span>       }}\n<span class="token prefix unchanged"> </span>     />\n</span></code></pre>\n<p>接下来打开 <code>app/questions/mutations/createQuestion.ts</code> 并更新 zod 模式，来让 mutation 接收 choice 数据。而且我们还需要更新 <code>db.question.create</code> 调用，以便 choice 也可以被创建。</p>\n<pre class="language-diff"><code class="language-diff">// app/questions/mutations/createQuestion.ts\n\nconst CreateQuestion = z\n<span class="token unchanged"><span class="token prefix unchanged"> </span> .object({\n<span class="token prefix unchanged"> </span>   text: z.string(),\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>   choices: z.array(z.object({text: z.string()})),\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span> })\n<span class="token prefix unchanged"> </span> .nonstrict()\n</span>\nexport default resolver.pipe(\n<span class="token unchanged"><span class="token prefix unchanged"> </span> resolver.zod(CreateQuestion),\n<span class="token prefix unchanged"> </span> resolver.authorize(),\n<span class="token prefix unchanged"> </span> async (input) => {\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>   const question = await db.question.create({data: input})\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>   const question = await db.question.create({\n<span class="token prefix inserted">+</span>     data: {\n<span class="token prefix inserted">+</span>       ...input,\n<span class="token prefix inserted">+</span>       choices: {create: input.choices},\n<span class="token prefix inserted">+</span>     },\n<span class="token prefix inserted">+</span>   })\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span>   return question\n<span class="token prefix unchanged"> </span> },\n</span>)\n</code></pre>\n<h4 id="%E8%AF%95%E8%AF%95%E7%9C%8B">试试看<a class="anchor" href="#%E8%AF%95%E8%AF%95%E7%9C%8B">§</a></h4>\n<p>现在你可以转到 <code>localhost:3000/questions/new</code> 并创建一个带有选择的新问题！</p>\n<h3 id="%E5%88%97%E5%87%BA%E9%80%89%E6%8B%A9">列出选择<a class="anchor" href="#%E5%88%97%E5%87%BA%E9%80%89%E6%8B%A9">§</a></h3>\n<p>该轻松一下了。返回浏览器中的 <code>localhost:3000/questions</code> 并查看你创建的所有问题。让我们在这些问题下列出相关的选择如何？首先，我们需要自定义问题查询函数。在 Prisma 中，你需要手动让客户端知道你需要查询的嵌套关系，将你的 <code>getQuestion.ts</code> 和 <code>getQuestions.ts</code> 文件更改为如下所示：</p>\n<pre class="language-diff"><code class="language-diff">// app/questions/queries/getQuestion.ts\n\nconst GetQuestion = z.object({\n<span class="token unchanged"><span class="token prefix unchanged"> </span> // This accepts type of undefined, but is required at runtime\n<span class="token prefix unchanged"> </span> id: z.number().optional().refine(Boolean, "Required"),\n</span>})\n\nexport default resolver.pipe(\n<span class="token unchanged"><span class="token prefix unchanged"> </span> resolver.zod(GetQuestion),\n<span class="token prefix unchanged"> </span> resolver.authorize(),\n<span class="token prefix unchanged"> </span> async ({id}) => {\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>   const question = await db.question.findFirst({where: {id}})\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>   const question = await db.question.findFirst({\n<span class="token prefix inserted">+</span>     where: {id},\n<span class="token prefix inserted">+</span>     include: {choices: true},\n<span class="token prefix inserted">+</span>   })\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span>   if (!question) throw new NotFoundError()\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span>   return question\n<span class="token prefix unchanged"> </span> },\n</span>)\n</code></pre>\n<pre class="language-diff"><code class="language-diff">// app/questions/queries/getQuestions.ts\n\ninterface GetQuestionsInput\n<span class="token unchanged"><span class="token prefix unchanged"> </span> extends Pick&lt;\n<span class="token prefix unchanged"> </span>   Prisma.QuestionFindManyArgs,\n<span class="token prefix unchanged"> </span>   "where" | "orderBy" | "skip" | "take"\n<span class="token prefix unchanged"> </span> > {}\n</span>\nexport default resolver.pipe(\n<span class="token unchanged"><span class="token prefix unchanged"> </span> resolver.authorize(),\n<span class="token prefix unchanged"> </span> async ({where, orderBy, skip = 0, take = 100}: GetQuestionsInput) => {\n<span class="token prefix unchanged"> </span>   const {items: questions, hasMore, nextPage, count} = await paginate({\n<span class="token prefix unchanged"> </span>     skip,\n<span class="token prefix unchanged"> </span>     take,\n<span class="token prefix unchanged"> </span>     count: () => db.question.count({where}),\n<span class="token prefix unchanged"> </span>     query: (paginateArgs) =>\n<span class="token prefix unchanged"> </span>       db.question.findMany({\n<span class="token prefix unchanged"> </span>         ...paginateArgs,\n<span class="token prefix unchanged"> </span>         where,\n<span class="token prefix unchanged"> </span>         orderBy,\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>         include: {choices: true},\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span>       }),\n<span class="token prefix unchanged"> </span>   })\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span>   return {\n<span class="token prefix unchanged"> </span>     questions,\n<span class="token prefix unchanged"> </span>     nextPage,\n<span class="token prefix unchanged"> </span>     hasMore,\n<span class="token prefix unchanged"> </span>     count,\n<span class="token prefix unchanged"> </span>   }\n<span class="token prefix unchanged"> </span> },\n</span>)\n</code></pre>\n<p>现在在浏览器中跳回我们主要的 Question 页面 (<code>app/pages/questions/index.tsx</code>)，我们可以列出每个问题的选择。并将此代码添加到我们 <code>QuestionsList</code> 中的 <code>Link</code> 下：</p>\n<pre class="language-diff"><code class="language-diff">// app/pages/questions/index.tsx\n\n// ...\n{\n<span class="token unchanged"><span class="token prefix unchanged"> </span> questions.map((question) => (\n<span class="token prefix unchanged"> </span>   &lt;li key={question.id}>\n<span class="token prefix unchanged"> </span>     &lt;Link href={`/questions/${question.id}`}>\n<span class="token prefix unchanged"> </span>       &lt;a>{question.text}&lt;/a>\n<span class="token prefix unchanged"> </span>     &lt;/Link>\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>     &lt;ul>\n<span class="token prefix inserted">+</span>       {question.choices.map((choice) => (\n<span class="token prefix inserted">+</span>         &lt;li key={choice.id}>\n<span class="token prefix inserted">+</span>           {choice.text} - {choice.votes} votes\n<span class="token prefix inserted">+</span>         &lt;/li>\n<span class="token prefix inserted">+</span>       ))}\n<span class="token prefix inserted">+</span>     &lt;/ul>\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span>   &lt;/li>\n<span class="token prefix unchanged"> </span> ))\n</span>}\n// ...\n</code></pre>\n<p>现在在浏览器中访问 <code>/questions</code> 路由。<strong>神奇吧！</strong></p>\n<h3 id="%E8%AE%A9%E6%88%91%E4%BB%AC%E5%85%81%E8%AE%B8%E7%94%A8%E6%88%B7%E5%AF%B9%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E6%8A%95%E7%A5%A8">让我们允许用户对这些问题投票！<a class="anchor" href="#%E8%AE%A9%E6%88%91%E4%BB%AC%E5%85%81%E8%AE%B8%E7%94%A8%E6%88%B7%E5%AF%B9%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E6%8A%95%E7%A5%A8">§</a></h3>\n<p>在浏览器中打开 <code>app/pages/questions/[questionId].tsx</code>。首先，我们将对该页面进行一些改造。</p>\n<ol>\n<li>替换 <code>&lt;h1&gt;Question {question.id}&lt;/h1&gt;</code> 为 <code>&lt;h1&gt;{question.text}&lt;/h1&gt;</code>.</li>\n<li>删除 <code>pre</code> 元素，并将如下复制到之前写的选择列表中：</li>\n</ol>\n<pre class="language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token punctuation">{</span>question<span class="token punctuation">.</span><span class="token property-access">choices</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">choice</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>choice<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>choice<span class="token punctuation">.</span><span class="token property-access">text</span><span class="token punctuation">}</span><span class="token plain-text"> - </span><span class="token punctuation">{</span>choice<span class="token punctuation">.</span><span class="token property-access">votes</span><span class="token punctuation">}</span><span class="token plain-text"> votes\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>如果返回浏览器，页面目前看起来像这样！</p>\n<p><img src="https://cdn.nlark.com/yuque/0/2021/png/86548/1616475118256-6e625fe9-db7f-44ec-9a07-68a3eced32c7.png#align=left&amp;display=inline&amp;height=285&amp;margin=%5Bobject%20Object%5D&amp;originHeight=570&amp;originWidth=1134&amp;size=0&amp;status=done&amp;style=none&amp;width=567" alt=""></p>\n<h3 id="%E7%8E%B0%E5%9C%A8%E6%98%AF%E6%97%B6%E5%80%99%E6%9D%A5%E5%A2%9E%E5%8A%A0%E6%8A%95%E7%A5%A8%E5%8A%9F%E8%83%BD">现在是时候来增加投票功能！<a class="anchor" href="#%E7%8E%B0%E5%9C%A8%E6%98%AF%E6%97%B6%E5%80%99%E6%9D%A5%E5%A2%9E%E5%8A%A0%E6%8A%95%E7%A5%A8%E5%8A%9F%E8%83%BD">§</a></h3>\n<p>首先我们需要打开 <code>app/choices/mutations/updateChoice.ts</code>，更新 zod 模式，添加新增投票功能。</p>\n<pre class="language-diff"><code class="language-diff">const UpdateChoice = z\n<span class="token unchanged"><span class="token prefix unchanged"> </span> .object({\n<span class="token prefix unchanged"> </span>   id: z.number(),\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>   name: z.string(),\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span> })\n<span class="token prefix unchanged"> </span> .nonstrict()\n</span>\nexport default resolver.pipe(\n<span class="token unchanged"><span class="token prefix unchanged"> </span> resolver.zod(UpdateChoice),\n<span class="token prefix unchanged"> </span> resolver.authorize(),\n<span class="token prefix unchanged"> </span> async ({id, ...data}) => {\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>   const choice = await db.choice.update({where: {id}, data})\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>   const choice = await db.choice.update({\n<span class="token prefix inserted">+</span>     where: {id},\n<span class="token prefix inserted">+</span>     data: {votes: {increment: 1}},\n<span class="token prefix inserted">+</span>   })\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span>   return choice\n<span class="token prefix unchanged"> </span> },\n</span>)\n</code></pre>\n<p>返回到 <code>app/pages/questions/[questionId].tsx</code> 中进行如下更改：</p>\n<p>在我们的 <code>li</code> 中，新增一个如下的 <code>button</code>：</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>choice<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token punctuation">{</span>choice<span class="token punctuation">.</span><span class="token property-access">text</span><span class="token punctuation">}</span><span class="token plain-text"> - </span><span class="token punctuation">{</span>choice<span class="token punctuation">.</span><span class="token property-access">votes</span><span class="token punctuation">}</span><span class="token plain-text"> votes\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">Vote</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>接下来，导入我们更新的 <code>updateChoice</code> mutation，并在页面中创建 <code>handleVote</code> 函数。</p>\n<pre class="language-diff"><code class="language-diff">// app/pages/questions/[questionId].tsx\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>import updateChoice from "app/choices/mutations/updateChoice"\n</span>\n//...\n\nexport const Question = () => {\n<span class="token unchanged"><span class="token prefix unchanged"> </span> const router = useRouter()\n<span class="token prefix unchanged"> </span> const questionId = useParam("questionId", "number")\n<span class="token prefix unchanged"> </span> const [deleteQuestionMutation] = useMutation(deleteQuestion)\n<span class="token prefix unchanged"> </span> const [question] = useQuery(getQuestion, {id: questionId})\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span> const [updateChoiceMutation] = useMutation(updateChoice)\n<span class="token prefix inserted">+</span>\n<span class="token prefix inserted">+</span> const handleVote = async (id: number) => {\n<span class="token prefix inserted">+</span>   try {\n<span class="token prefix inserted">+</span>     await updateChoiceMutation({id})\n<span class="token prefix inserted">+</span>     refetch()\n<span class="token prefix inserted">+</span>   } catch (error) {\n<span class="token prefix inserted">+</span>     alert("Error updating choice " + JSON.stringify(error, null, 2))\n<span class="token prefix inserted">+</span>   }\n<span class="token prefix inserted">+</span> }\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span> return (\n</span></code></pre>\n<p>然后我们需要更新问题相关的 <code>useQuery</code> 调用以返回需要在 <code>handleVote</code> 内部使用的 <code>refetch</code> 函数。</p>\n<pre class="language-diff"><code class="language-diff">// app/pages/questions/[questionId].tsx\n\n//...\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span> const [question] = useQuery(getQuestion, {id: questionId})\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span> const [question, {refetch}] = useQuery(getQuestion, {id: questionId})\n</span>//...\n</code></pre>\n<p>最后，我们将告诉新的 <code>button</code> 来条用该函数！</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">handleVote</span><span class="token punctuation">(</span>choice<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Vote</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>最终的 <code>Question</code> 组件应该是这个样子：</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token keyword module">export</span> <span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">Question</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> questionId <span class="token operator">=</span> <span class="token function">useParam</span><span class="token punctuation">(</span><span class="token string">"questionId"</span><span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>deleteQuestionMutation<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span>deleteQuestion<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>question<span class="token punctuation">,</span> <span class="token punctuation">{</span>refetch<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span>getQuestion<span class="token punctuation">,</span> <span class="token punctuation">{</span>id<span class="token operator">:</span> questionId<span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>updateChoiceMutation<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span>updateChoice<span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">handleVote</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">await</span> <span class="token function">updateChoiceMutation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token function">refetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Error updating choice "</span> <span class="token operator">+</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Head</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token plain-text">Question </span><span class="token punctuation">{</span>question<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Head</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>question<span class="token punctuation">.</span><span class="token property-access">text</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">\n          </span><span class="token punctuation">{</span>question<span class="token punctuation">.</span><span class="token property-access">choices</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">choice</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>choice<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n              </span><span class="token punctuation">{</span>choice<span class="token punctuation">.</span><span class="token property-access">text</span><span class="token punctuation">}</span><span class="token plain-text"> - </span><span class="token punctuation">{</span>choice<span class="token punctuation">.</span><span class="token property-access">votes</span><span class="token punctuation">}</span><span class="token plain-text"> votes\n              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">handleVote</span><span class="token punctuation">(</span>choice<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Vote</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/questions/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>question<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/edit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token plain-text">Edit</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n\n        &lt;button\n          type="button"\n          onClick=</span><span class="token punctuation">{</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method function property-access">confirm</span><span class="token punctuation">(</span><span class="token string">"This will be deleted"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword control-flow">await</span> <span class="token function">deleteQuestionMutation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>id<span class="token operator">:</span> question<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n              router<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">"/questions"</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token plain-text">\n          style=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>marginLeft<span class="token operator">:</span> <span class="token string">"0.5rem"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token plain-text">\n        >\n          Delete\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E6%9C%80%E5%90%8E%E8%AE%A9%E6%88%91%E4%BB%AC%E6%94%AF%E6%8C%81%E7%BC%96%E8%BE%91%E6%9F%90%E9%97%AE%E9%A2%98%E4%B8%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E9%80%89%E6%8B%A9">最后，让我们支持编辑某问题下的一个选择<a class="anchor" href="#%E6%9C%80%E5%90%8E%E8%AE%A9%E6%88%91%E4%BB%AC%E6%94%AF%E6%8C%81%E7%BC%96%E8%BE%91%E6%9F%90%E9%97%AE%E9%A2%98%E4%B8%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E9%80%89%E6%8B%A9">§</a></h3>\n<p>如果单击现有问题之一上的“编辑”按钮，你将看到它使用与创建问题相同的形式。至\n此，该部分已经完成！我们只需要更新我们的 mutation。</p>\n<p>打开 <code>app/questions/mutations/updateQuestion.ts</code> 并进行如下改动：</p>\n<pre class="language-diff"><code class="language-diff">// app/questions/mutations/updateQuestion.ts\nimport {resolver} from "blitz"\nimport db from "db"\nimport * as z from "zod"\n\nconst UpdateQuestion = z\n<span class="token unchanged"><span class="token prefix unchanged"> </span> .object({\n<span class="token prefix unchanged"> </span>   id: z.number(),\n<span class="token prefix unchanged"> </span>   text: z.string(),\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>   choices: z.array(\n<span class="token prefix inserted">+</span>     z.object({id: z.number().optional(), text: z.string()}).nonstrict(),\n<span class="token prefix inserted">+</span>   ),\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span> })\n<span class="token prefix unchanged"> </span> .nonstrict()\n</span>\nexport default resolver.pipe(\n<span class="token unchanged"><span class="token prefix unchanged"> </span> resolver.zod(UpdateQuestion),\n<span class="token prefix unchanged"> </span> resolver.authorize(),\n<span class="token prefix unchanged"> </span> async ({id, ...data}) => {\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>   const question = await db.question.update({where: {id}, data})\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>   const question = await db.question.update({\n<span class="token prefix inserted">+</span>     where: {id},\n<span class="token prefix inserted">+</span>     data: {\n<span class="token prefix inserted">+</span>       ...data,\n<span class="token prefix inserted">+</span>       choices: {\n<span class="token prefix inserted">+</span>         upsert: data.choices.map((choice) => ({\n<span class="token prefix inserted">+</span>           // Appears to be a prisma bug,\n<span class="token prefix inserted">+</span>           // because `|| 0` shouldn\'t be needed\n<span class="token prefix inserted">+</span>           where: {id: choice.id || 0},\n<span class="token prefix inserted">+</span>           create: {text: choice.text},\n<span class="token prefix inserted">+</span>           update: {text: choice.text},\n<span class="token prefix inserted">+</span>         })),\n<span class="token prefix inserted">+</span>       },\n<span class="token prefix inserted">+</span>     },\n<span class="token prefix inserted">+</span>   })\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span>   return question\n<span class="token prefix unchanged"> </span> },\n</span>)\n</code></pre>\n<p><code>[upsert](https://www.prisma.io/docs/reference/api-reference/prisma-client-reference#upsert)</code> 是一种特殊的操作，表示“如果存在此项目，请对其进行更新。否则创建它”。这对于\n当前情况是完美的，因为我们不需要用户在创建问题时同时添加三个选择。所以如果\n用户通过编辑问题添加另一个选择，则将在此处创建它。</p>\n<h3 id="%E7%BB%93%E5%B0%BE">结尾<a class="anchor" href="#%E7%BB%93%E5%B0%BE">§</a></h3>\n<p>🥳 恭喜！你创建了自己的 Blitz 应用！祝你玩得开心，也欢迎与你的朋友分享。现在，你已经完成了本教程，为什么不尝试使你的投票应用变得更好呢？你可以尝试：</p>\n<ul>\n<li>添加样式 (提示, 试试 <code>blitz install tailwind</code> 或 <code>blitz install chakra-ui</code>)</li>\n<li>显示更多有关选票的统计信息</li>\n<li>在 Render 或 Vercel 上实时部署。</li>\n</ul>\n<p>如果你想与全球 Blitz 社区分享你的项目，没有比 Discord 更好的地方了。</p>\n<p>访问 <a href="https://discord.blitzjs.com">discord.blitzjs.com</a>。然后，将连接发布到 <strong>#built-with-blitz</strong> 频道来与所有人共享！</p>\n<h2 id="%E8%AF%91%E8%80%85%E7%BB%93%E8%AF%AD">译者结语<a class="anchor" href="#%E8%AF%91%E8%80%85%E7%BB%93%E8%AF%AD">§</a></h2>\n<p>本文内容属于 <a href="https://blitzjs.com/docs">Blitz.js 官方文档</a> - 简介章节的前半部分。总共十四个章节（简介、社区、基础、页面、路由、权限、数据库、Queries 和 Mutations、后端架构、部署、配方、配置、CLI 和模板）。未来不定期翻译其余章节，也可能会原创一些文章。</p>\n<p>《<a href="https://github.com/hylerrix/blitzjs-tutorial">Blitz.js + React 全栈开发手册</a>》系列专注探索 Blitz.js + React 全栈应用开发，原文翻译内容会同步更新到 <a href="https://github.com/blitz-js/zh-hans.blitzjs.com">Blitz.js 中文仓库</a> 上。欢迎 Star、Watch 或关注公众号 (@ningowood) 来及时接收消息。</p>\n<blockquote>\n<p>2021 © <a href="https://github.com/hylerrix/blitzjs-tutorial">https://github.com/hylerrix/blitzjs-tutorial</a></p>\n</blockquote>'
        } }),
    'head': React.createElement("link", { href: "/favicon.png", rel: "icon", type: "image/png" }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "Blitz.js \u5165\u95E8\u6559\u7A0B\uFF1A\u57FA\u4E8E Next.js \u7684\u4E0B\u4E00\u4EE3 React \u5168\u6808\u6846\u67B6"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E8%AF%91%E8%80%85%E5%BA%8F">译者序<a class="anchor" href="#%E8%AF%91%E8%80%85%E5%BA%8F">§</a></h2>\n<p>苦 JS 生态久已。在 2020 年后，一直徘徊于该为自己构建怎样的技术栈，迟迟没有太多落地成果——库太多了，一个小场景就能有很多个解决方案；方向也太多了，哪怕大前端三个字，现今都能拆分为很多的细分领域。直到遇到了 Rome，看到社区已经开始尝试整合重构 Node 生态的前端工具链；又遇到了 Deno，直接摆脱 Node 的历史遗留问题来建设更贴近现代标准的 JavaScript/TypeScript 运行时；现在又遇到了 Blitz.js，一站式 React 全栈框架，在 Next.js 之上赋能更多的后端场景...于是自己的很多方向性问题都豁然开朗：通过建立不同的 Repo 来专攻不同的方向，且每个 Repo 都能有代表性的同时，覆盖更多的场景。于是——</p>\n<ul>\n<li><a href="https://github.com/hylerrix/deno-tutorial">Deno 钻研之术</a>：看未来，学标准。Node 也不落下。</li>\n<li><a href="https://github.com/hylerrix/deno-algorithm">Deno 算法之旅</a>：刷算法，玩测试。</li>\n<li><a href="https://github.com/hylerrix/es-interview">ECMAScript 面试宝典</a>：备面试，打基础；</li>\n<li><a href="https://github.com/hylerrix/blitzjs-tutorial">Blitz.js + React 全栈开发手册</a>：搞工程，尝全栈。深入 React，实战 Next.js，掌握后端开发。</li>\n<li>以及还有一切弃坑的 repo......</li>\n</ul>\n<p>当然，Blitz.js 还有很多吸引人的特性：</p>\n<ul>\n<li><strong>一体式全栈架构</strong>：在一个 Monorepo 里从数据库到用户端全搞定，也没用重复性代码。试想前后端分离的架构下，如果你喜欢 TypeScript 的话，很可能得写两套相同 TS...且这种一体式架构很容易让自己的项目灵感从头到尾地快速落地。</li>\n<li><strong>API 不再必须</strong>：REST 和 GraphQL？或许都不需要，交给 Blitz.js 来在编译时构建。当需要提供 API 给更多端使用时，再结合相关库来生成 API。</li>\n<li><strong>更轻松的开箱体验</strong>：脚手架初始化后直接提供登录注册甚至重置密码功能，直接支持最基本的后端环境，开箱即用的体验不能再好，同时甚至能通过强大的 blitz generate CLI 快速植入生态圈中的主流库到项目中。</li>\n<li><strong>并不会“学不动了”</strong>：基于 Next.js，前端 React，后端 Prisma 等库，Blitz.js 构建于各种已经主流化的生态之上。</li>\n<li><strong>拥抱未来</strong>：Blitz.js 预计将于下个月（2021 年 4 月）发布 v1.0 版本。</li>\n</ul>\n<p>本文属于《<a href="https://github.com/hylerrix/blitzjs-tutorial">Blitz.js + React 全栈开发手册</a>》系列，原文翻译内容会同步更新到 <a href="https://github.com/blitz-js/zh-hans.blitzjs.com">Blitz.js 中文仓库</a> 上。欢迎 Star 和 Watch：<a href="https://github.com/hylerrix/blitzjs-tutorial">https://github.com/hylerrix/blitzjs-tutorial</a>。</p>\n<h2 id="%E5%BF%AB%E9%80%9F%E5%85%A5%E6%89%8B">快速入手<a class="anchor" href="#%E5%BF%AB%E9%80%9F%E5%85%A5%E6%89%8B">§</a></h2>\n<h3 id="%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84%E7%8E%AF%E5%A2%83">配置你的环境<a class="anchor" href="#%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84%E7%8E%AF%E5%A2%83">§</a></h3>\n<p>你需要使用 Node 12 或者更新的版本。</p>\n<h3 id="%E5%AE%89%E8%A3%85-blitz">安装 Blitz<a class="anchor" href="#%E5%AE%89%E8%A3%85-blitz">§</a></h3>\n<p>执行 <code>npm install -g blitz</code></p>\n<h3 id="%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E9%A1%B9%E7%9B%AE">创建一个新项目<a class="anchor" href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E9%A1%B9%E7%9B%AE">§</a></h3>\n<ol>\n<li><code>blitz new myAppName</code></li>\n<li><code>cd myAppName</code></li>\n<li><code>blitz dev</code></li>\n<li>访问你的新项目 <a href="http://localhost:3000">http://localhost:3000</a></li>\n</ol>\n<h3 id="%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0-blitz-%E7%A4%BE%E5%8C%BA-%F0%9F%91%8B">欢迎来到 Blitz 社区 👋<a class="anchor" href="#%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0-blitz-%E7%A4%BE%E5%8C%BA-%F0%9F%91%8B">§</a></h3>\n<p>Blitz 社区是个温暖、安全、多样化、包容也不失有趣的社区！ LGBTQ+、女生和少数派欢迎你们的到来。</p>\n<p><a href="https://discord.blitzjs.com">加入我们的 Discord 社区</a>，我们会在这里帮助每个人搭建 Blitz 应用。这里也是我们协作共建 Blitz 本身的重要场地。</p>\n<p>对于提问以及会花费较长时间的讨论，<a href="https://github.com/blitz-js/blitz/discussions">可以发帖到我们的论坛中</a>。</p>\n<p>有关完整的介绍，请阅读 社区是如何运作的。文中包括了如何获得帮助、如何报告错误以及如何提出新功能建议等的详细指导。</p>\n<p><strong>欢迎你的帮助来使 Blitz 变得更好！ 🤝</strong></p>\n<p>我们有一个很棒的社区正在共同努力让 Blitz 成为世界上一流的框架。</p>\n<p>你该如何提供帮助：</p>\n<ol>\n<li>通过 <a href="https://github.com/blitz-js/blitz/issues/new/choose">在 GitHub 上提交 issue</a> 来反馈 Bug。</li>\n<li>贡献代码： 阅读贡献指南，以了解如何开始。</li>\n<li><a href="https://github.com/blitz-js/blitz#sponsors-and-donations">赞助 &amp; 捐赠</a>，可以从 $5/月 开始。</li>\n<li>以及你觉得可以的其它任何方式！我们非常感谢你的任何贡献（如文档、视频、博客等）。如果你遇到任何阻碍，欢迎来 Discord 上与我们交流！:)</li>\n</ol>\n<h3 id="%E4%B8%8B%E4%B8%80%E6%AD%A5">下一步<a class="anchor" href="#%E4%B8%8B%E4%B8%80%E6%AD%A5">§</a></h3>\n<h4 id="%E6%95%99%E7%A8%8B">教程<a class="anchor" href="#%E6%95%99%E7%A8%8B">§</a></h4>\n<p>教程篇 是有关 Blitz 所有基本内容的完整练习，其中包括将模型添加到数据库以及从前端读取和更新数据。</p>\n<h4 id="%E5%AD%A6%E4%B9%A0">学习<a class="anchor" href="#%E5%AD%A6%E4%B9%A0">§</a></h4>\n<p>这里有你想要熟悉的 Blitz 的关键概念：</p>\n<ul>\n<li>如何 新建页面</li>\n<li>如何 使用文件路由系统</li>\n<li>如何设置并 使用数据库</li>\n<li>如何使用 Blitz Queries 和 Mutations 来读写你的数据库。</li>\n<li>如何通过 <code>blitz generate</code> 命令来用脚手架生成数据库模型\n的所有代码。</li>\n</ul>\n<h2 id="%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B">入门教程<a class="anchor" href="#%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B">§</a></h2>\n<p>在本教程中，我们将会指导你创建一个简易的投票系统。</p>\n<p>我们将假设你已经 安装了 Blitz。你可以通过在终端运行以下命令来确定 Blitz 是否已经安装或检查安装的版本号：</p>\n<pre class="language-bash"><code class="language-bash">blitz -v\n</code></pre>\n<p>如果 Blitz 已经安装成功，你应该能看到安装的版本号。否则你会收到一条像这样的错误提示：“command not found: blitz”。</p>\n<h3 id="%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E5%BA%94%E7%94%A8">创建一个新应用<a class="anchor" href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E5%BA%94%E7%94%A8">§</a></h3>\n<p>在命令行中，<code>cd</code> 进入你想要创建应用的根目录文件夹后，执行以下命令：</p>\n<pre class="language-autoit"><code class="language-autoit">blitz new my<span class="token operator">-</span>blitz<span class="token operator">-</span>app\n</code></pre>\n<p>Blitz 会在你当前的文件夹中创建一个 <code>my-blitz-app</code> 文件夹。你接着会收到一个选择表单库的提示。本教程中将选择其中推荐的 <code>React Final Form</code> 库。</p>\n<p>让我们看看 <code>blitz new</code> 命令创建了什么：</p>\n<pre class="language-markdown"><code class="language-markdown">my-blitz-app\n├── app/\n│   ├── api/\n│   ├── auth/\n│   │   ├── components/\n│   │   │   ├── LoginForm.tsx\n│   │   │   └── SignupForm.tsx\n│   │   ├── mutations/\n│   │   │   ├── changePassword.ts\n│   │   │   ├── forgotPassword.test.ts\n│   │   │   ├── forgotPassword.ts\n│   │   │   ├── login.ts\n│   │   │   ├── logout.ts\n│   │   │   ├── resetPassword.test.ts\n│   │   │   ├── resetPassword.ts\n│   │   │   └── signup.ts\n│   │   ├── pages/\n│   │   │   ├── forgot-password.tsx\n│   │   │   ├── login.tsx\n│   │   │   ├── reset-password.tsx\n│   │   │   └── signup.tsx\n│   │   └── validations.ts\n│   ├── core/\n│   │   ├── components/\n│   │   │   ├── Form.tsx\n│   │   │   └── LabeledTextField.tsx\n│   │   ├── hooks/\n│   │   │   └── useCurrentUser.ts\n│   │   └── layouts/\n│   │       └── Layout.tsx\n│   ├── pages/\n│   │   ├── 404.tsx\n│   │   ├── _app.tsx\n│   │   ├── _document.tsx\n│   │   ├── index.test.tsx\n│   │   └── index.tsx\n│   └── users/\n│       └── queries/\n│           └── getCurrentUser.ts\n├── db/\n│   ├── index.ts\n│   ├── schema.prisma\n│   └── seeds.ts\n├── integrations/\n├── mailers/\n│   └── forgotPasswordMailer.ts\n├── public/\n│   ├── favicon.ico*\n│   └── logo.png\n├── test/\n│   ├── setup.ts\n│   └── utils.tsx\n├── README.md\n├── babel.config.js\n├── blitz.config.js\n├── jest.config.js\n├── package.json\n├── tsconfig.json\n├── types.d.ts\n├── types.ts\n└── yarn.lock\n</code></pre>\n<p>上述文件有：</p>\n<ul>\n<li><code>app/</code> 文件夹是项目中绝大多数功能的容器。你可以在这里放置任何页面或 API 路由。</li>\n<li><code>app/pages/</code> 文件夹是主要的页面文件夹。如果你使用过 Next.js 你将会立即注意到两者的不同。在 Blitz 中，你可以有许多 <code>pages</code> 文件夹，它们将在构建时合并在一起。</li>\n<li><code>app/core/</code> 文件夹是放置整个应用中使用到的通用组件、Hooks 等的主要位置。</li>\n<li><code>db/</code> 是数据库配置所在的位置。如果你正在编写模型或检查迁移情况，可以来这里。</li>\n<li><code>public/</code> 文件夹可以让你放置任何静态资源。如果你有要在应用中使用的图像、文件或视频等，都可以放置在其中。</li>\n<li><code>.babelrc.js</code>、<code>.env</code> 等（“dotfiles 文件”）是各种 JavaScript 工具需要用到的配置文件。</li>\n<li><code>blitz.config.js</code> 用于 Blitz 的高级自定义配置，与 <code>next.config.js</code> 相同</li>\n<li><code>tsconfig.json</code> 是我们推荐的 TypeScript 设置。</li>\n</ul>\n<h3 id="%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%9C%8D%E5%8A%A1%E5%99%A8">开发环境服务器<a class="anchor" href="#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%9C%8D%E5%8A%A1%E5%99%A8">§</a></h3>\n<p>现在，如果你还没有在 <code>my-blitz-app</code> 文件夹下，确保切换到其中，并运行以下命令：</p>\n<pre class="language-autoit"><code class="language-autoit">blitz dev\n</code></pre>\n<p>你将会在命令行中看到如下输出：</p>\n<pre class="language-autoit"><code class="language-autoit">✔ Compiled\nLoaded env from <span class="token operator">/</span>private<span class="token operator">/</span>tmp<span class="token operator">/</span>my<span class="token operator">-</span>blitz<span class="token operator">-</span>app<span class="token operator">/</span><span class="token punctuation">.</span>env\nwarn  <span class="token operator">-</span> You have enabled experimental <span class="token function">feature</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>\nwarn  <span class="token operator">-</span> Experimental features are <span class="token operator">not</span> covered by semver<span class="token punctuation">,</span> <span class="token operator">and</span> may cause unexpected <span class="token operator">or</span> broken application behavior<span class="token punctuation">.</span> Use them at your own risk<span class="token punctuation">.</span>\n\nready <span class="token operator">-</span> started server on <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token punctuation">:</span><span class="token number">3000</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">3000</span>\ninfo  <span class="token operator">-</span> Using external babel configuration from <span class="token operator">/</span>my<span class="token operator">-</span>blitz<span class="token operator">-</span>app<span class="token operator">/</span>babel<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js\nevent <span class="token operator">-</span> compiled successfully\n</code></pre>\n<p>现在服务器已成功运行，浏览器中访问 <a href="http://localhost:3000">localhost:3000</a>。你将会看到带有 Blitz logo 的欢迎页面。成功了！</p>\n<h3 id="%E4%BB%A5%E7%94%A8%E6%88%B7%E8%BA%AB%E4%BB%BD%E6%B3%A8%E5%86%8C">以用户身份注册<a class="anchor" href="#%E4%BB%A5%E7%94%A8%E6%88%B7%E8%BA%AB%E4%BB%BD%E6%B3%A8%E5%86%8C">§</a></h3>\n<p>Bliz 应用让用户登录和注册开箱即用！现在让我们来尝试一下。点击 <strong>注册</strong> 按钮，输入任何电子邮件和密码，然后单击 <strong>创建账户</strong> 后，你将被重定向到用户主页，并在其中可以看到你的用户 <code>id</code> 和 <code>role</code>。</p>\n<p>如果需要，你也可以尝试注销并重新登录。或在登录页面上单击 <strong>忘记密码</strong>，以尝试重置密码流程。</p>\n<h3 id="%E7%BC%96%E5%86%99%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2">编写你的第一个页面<a class="anchor" href="#%E7%BC%96%E5%86%99%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2">§</a></h3>\n<p>接下来让我们创建你的第一个页面。</p>\n<p>打开 <code>app/pages/index.tsx</code> 文件然后替换掉 <code>Home</code> 组件的所有内容为这段代码：</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token comment">//...</span>\n\n<span class="token keyword">const</span> <span class="token maybe-class-name">Home</span><span class="token operator">:</span> <span class="token function-variable function"><span class="token maybe-class-name">BlitzPage</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello, world!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Loading...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//...</span>\n</code></pre>\n<p>保存文件后你将会看到浏览器页面进行了更新。你可以如你所愿地添加需要的各种自\n定义项，。准备就绪后，请转到下一节。</p>\n<h3 id="%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE">数据库配置<a class="anchor" href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE">§</a></h3>\n<p>好消息是，已经为你建立好了 SQLite 数据库！你可以在终端中运行 <code>blitz prisma studio</code> 来打开一个可以查看数据库数据的 Web 界面。</p>\n<p>请注意，在开始第一个实际项目时，你可能希望使用可扩展性更高的数据库（如 PostgreSQL），以避免在将来切换数据库时产生的麻烦。有关更多信息，请参见 数据库概述 篇。目前，我们将继续使用默认的 SQLite 数据库。</p>\n<h3 id="%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6%E4%BB%A3%E7%A0%81">模型的脚手架代码<a class="anchor" href="#%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6%E4%BB%A3%E7%A0%81">§</a></h3>\n<p>Blitz 提供了一个方便的 CLI 命令 <code>generate</code> 来构建样板代码。我们将使用 <code>generate</code> 来创建两个模型：<code>Question</code>（问题） 和 <code>Choice</code>（选择）。<code>Question</code> 包含问题内容和选择列表。<code>Choice</code> 包含选择内容、投票计数以及相关的问题。Blitz 将为这两个模型自动生成一个 id、一个创建时间戳以及一个最新更新的时间戳。</p>\n<h4 id="%E9%A6%96%E5%85%88%E6%88%91%E4%BB%AC%E5%B0%86%E7%94%9F%E6%88%90%E4%B8%8E-question-%E6%A8%A1%E5%9E%8B%E6%9C%89%E5%85%B3%E7%9A%84%E6%89%80%E6%9C%89%E4%BF%A1%E6%81%AF">首先，我们将生成与 <code>Question</code> 模型有关的所有信息：<a class="anchor" href="#%E9%A6%96%E5%85%88%E6%88%91%E4%BB%AC%E5%B0%86%E7%94%9F%E6%88%90%E4%B8%8E-question-%E6%A8%A1%E5%9E%8B%E6%9C%89%E5%85%B3%E7%9A%84%E6%89%80%E6%9C%89%E4%BF%A1%E6%81%AF">§</a></h4>\n<pre class="language-bash"><code class="language-bash">blitz generate all question text:string\n</code></pre>\n<p>当出现提示框时，按 <strong>Enter</strong> 以运行 <code>prisma migrate</code>，这将使用新的模型来更新你的数据库架构。此时会要求一个名称，可以输入“add question”之类的值。</p>\n<pre class="language-bash"><code class="language-bash">CREATE    app/pages/questions/<span class="token punctuation">[</span>questionId<span class="token punctuation">]</span>.tsx\nCREATE    app/pages/questions/<span class="token punctuation">[</span>questionId<span class="token punctuation">]</span>/edit.tsx\nCREATE    app/pages/questions/index.tsx\nCREATE    app/pages/questions/new.tsx\nCREATE    app/questions/components/QuestionForm.tsx\nCREATE    app/questions/queries/getQuestion.ts\nCREATE    app/questions/queries/getQuestions.ts\nCREATE    app/questions/mutations/createQuestion.ts\nCREATE    app/questions/mutations/deleteQuestion.ts\nCREATE    app/questions/mutations/updateQuestion.ts\n\n✔ Model <span class="token keyword">for</span> <span class="token string">\'question\'</span> created <span class="token keyword">in</span> schema.prisma:\n\n<span class="token operator">></span> model Question <span class="token punctuation">{</span>\n<span class="token operator">></span>   <span class="token function">id</span>        Int      @default<span class="token punctuation">(</span>autoincrement<span class="token punctuation">(</span><span class="token punctuation">))</span> @id\n<span class="token operator">></span>   createdAt DateTime @default<span class="token punctuation">(</span>now<span class="token punctuation">(</span><span class="token punctuation">))</span>\n<span class="token operator">></span>   updatedAt DateTime @updatedAt\n<span class="token operator">></span>   text      String\n<span class="token operator">></span> <span class="token punctuation">}</span>\n\n? Run <span class="token string">\'prisma migrate dev\'</span> to update your database? <span class="token punctuation">(</span>Y/n<span class="token punctuation">)</span> › <span class="token boolean">true</span>\n</code></pre>\n<pre class="language-bash"><code class="language-bash">Environment variables loaded from .env\nPrisma schema loaded from db/schema.prisma\nDatasource <span class="token string">"db"</span><span class="token builtin class-name">:</span> SQLite database <span class="token string">"db.sqlite"</span> at <span class="token string">"file:./db.sqlite"</span>\n\n✔ Name of migration … <span class="token function">add</span> question\nThe following migration<span class="token punctuation">(</span>s<span class="token punctuation">)</span> have been created and applied from new schema changes:\n\nmigrations/\n  └─ 20210217035805_add_question/\n    └─ migration.sql\n\n✔ Generated Prisma Client <span class="token punctuation">(</span><span class="token number">2.17</span>.0<span class="token punctuation">)</span> to ./<a class="token email-link" href="mailto:node_modules/@prisma">node_modules/@prisma</a>/client <span class="token keyword">in</span> 103ms\n\nEverything is now <span class="token keyword">in</span> sync.\n</code></pre>\n<p><code>generate</code> 命令搭配 <code>all</code> 类型将生成相关的模型、queries、mutation 和页面文件。请参见 Blitz generate 页面查询更多可用的类型选项。</p>\n<h4 id="%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%88%91%E4%BB%AC%E5%B0%86%E7%94%9F%E6%88%90%E5%B8%A6%E6%9C%89%E7%9B%B8%E5%BA%94-queries-%E5%92%8C-mutations-%E7%9A%84-choice-%E6%A8%A1%E5%9E%8B">接下来，我们将生成带有相应 queries 和 mutations 的 <code>Choice</code> 模型。<a class="anchor" href="#%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%88%91%E4%BB%AC%E5%B0%86%E7%94%9F%E6%88%90%E5%B8%A6%E6%9C%89%E7%9B%B8%E5%BA%94-queries-%E5%92%8C-mutations-%E7%9A%84-choice-%E6%A8%A1%E5%9E%8B">§</a></h4>\n<p>这次我们搭配 <code>resource</code> 类型，因为我们不需要为 <code>Choice</code> 模型生成页面：</p>\n<pre class="language-bash"><code class="language-bash">blitz generate resource choice text votes:int:default<span class="token operator">=</span><span class="token number">0</span> belongsTo:question\n</code></pre>\n<p>同样，在系统提示你进行迁移时，按 <strong>Enter</strong> 后输入迁移的名称。</p>\n<pre class="language-bash"><code class="language-bash">CREATE    app/choices/queries/getChoice.ts\nCREATE    app/choices/queries/getChoices.ts\nCREATE    app/choices/mutations/createChoice.ts\nCREATE    app/choices/mutations/deleteChoice.ts\nCREATE    app/choices/mutations/updateChoice.ts\n\n✔ Model <span class="token keyword">for</span> <span class="token string">\'choice\'</span> created <span class="token keyword">in</span> schema.prisma:\n\n<span class="token operator">></span> model Choice <span class="token punctuation">{</span>\n<span class="token operator">></span>   <span class="token function">id</span>         Int      @default<span class="token punctuation">(</span>autoincrement<span class="token punctuation">(</span><span class="token punctuation">))</span> @id\n<span class="token operator">></span>   createdAt  DateTime @default<span class="token punctuation">(</span>now<span class="token punctuation">(</span><span class="token punctuation">))</span>\n<span class="token operator">></span>   updatedAt  DateTime @updatedAt\n<span class="token operator">></span>   text       String\n<span class="token operator">></span>   votes      Int      @default<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token operator">></span>   question   Question @relation<span class="token punctuation">(</span>fields: <span class="token punctuation">[</span>questionId<span class="token punctuation">]</span>, references: <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token operator">></span>   questionId Int\n<span class="token operator">></span> <span class="token punctuation">}</span>\n\n? Run <span class="token string">\'prisma migrate dev\'</span> to update your database? <span class="token punctuation">(</span>Y/n<span class="token punctuation">)</span> › <span class="token boolean">true</span>\n</code></pre>\n<h4 id="%E6%9C%80%E5%90%8E%E8%AE%A9%E6%88%91%E4%BB%AC%E6%9B%B4%E6%96%B0-question-%E6%A8%A1%E5%9E%8B%E4%BB%A5%E5%85%B3%E8%81%94%E5%88%B0-choice-%E4%B8%8A">最后，让我们更新 <code>Question</code> 模型以关联到 <code>Choice</code> 上。<a class="anchor" href="#%E6%9C%80%E5%90%8E%E8%AE%A9%E6%88%91%E4%BB%AC%E6%9B%B4%E6%96%B0-question-%E6%A8%A1%E5%9E%8B%E4%BB%A5%E5%85%B3%E8%81%94%E5%88%B0-choice-%E4%B8%8A">§</a></h4>\n<p>打开 <code>db/schema.prisma</code> 并在 <code>Question</code> 模型中添加 <code>choices Choice[]</code>。</p>\n<pre class="language-diff"><code class="language-diff">model Question {\n<span class="token unchanged"><span class="token prefix unchanged"> </span> id        Int      @id @default(autoincrement())\n<span class="token prefix unchanged"> </span> createdAt DateTime @default(now())\n<span class="token prefix unchanged"> </span> updatedAt DateTime @updatedAt\n<span class="token prefix unchanged"> </span> text      String\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span> choices   Choice[]\n</span>}\n</code></pre>\n<p>然后运行 <code>blitz prisma generate</code> 来更新 prisma 客户端以同步 schema 的更改。这里不涉及数据库迁移，因为数据库中没有实际字段添加到 <code>Question</code> 模型中。</p>\n<h3 id="%E8%AE%BF%E9%97%AE-prisma-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%A2%E6%88%B7%E7%AB%AF">访问 Prisma 数据库客户端<a class="anchor" href="#%E8%AE%BF%E9%97%AE-prisma-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%A2%E6%88%B7%E7%AB%AF">§</a></h3>\n<p>现在，让我们跳进 Blitz 交互式 Shell 中，并使用 Blitz 为你提供的 Primsa 数据库客户端。要启动 Blitz 控制台，请使用以下命令：</p>\n<pre class="language-bash"><code class="language-bash">blitz console\n</code></pre>\n<p>一旦你进入控制台后，浏览数据库客户端：</p>\n<pre class="language-bash"><code class="language-bash"><span class="token comment"># No questions are in the system yet.</span>\n⚡ <span class="token operator">></span> await db.question.findMany<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n<span class="token comment"># Create a new Question:</span>\n⚡ <span class="token operator">></span> <span class="token builtin class-name">let</span> q <span class="token operator">=</span> await db.question.create<span class="token punctuation">(</span><span class="token punctuation">{</span>data: <span class="token punctuation">{</span>text: <span class="token string">"What\'s new?"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\nundefined\n\n<span class="token comment"># See the entire object:</span>\n⚡ <span class="token operator">></span> q\n<span class="token punctuation">{</span>\n  id: <span class="token number">1</span>,\n  createdAt: <span class="token number">2020</span>-06-15T15:06:14.959Z,\n  updatedAt: <span class="token number">2020</span>-06-15T15:06:14.959Z,\n  text: <span class="token string">"What\'s new?"</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment"># Or, access individual values on the object:</span>\n⚡ <span class="token operator">></span> q.text\n<span class="token string">"What\'s new?"</span>\n\n<span class="token comment"># Change values by using the update function:</span>\n⚡ <span class="token operator">></span> q <span class="token operator">=</span> await db.question.update<span class="token punctuation">(</span><span class="token punctuation">{</span>where: <span class="token punctuation">{</span>id: <span class="token number">1</span><span class="token punctuation">}</span>, data: <span class="token punctuation">{</span>text: <span class="token string">"What\'s up?"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n  id: <span class="token number">1</span>,\n  createdAt: <span class="token number">2020</span>-06-15T15:06:14.959Z,\n  updatedAt: <span class="token number">2020</span>-06-15T15:13:17.394Z,\n  text: <span class="token string">"What\'s up?"</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment"># db.question.findMany() now displays all the questions in the database:</span>\n⚡ <span class="token operator">></span> await db.question.findMany<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    id: <span class="token number">1</span>,\n    createdAt: <span class="token number">2020</span>-06-15T15:06:14.959Z,\n    updatedAt: <span class="token number">2020</span>-06-15T15:13:17.394Z,\n    text: <span class="token string">"What\'s up?"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre>\n<h3 id="%E6%9B%B4%E6%96%B0%E6%A8%A1%E5%9E%8B%E5%B1%9E%E6%80%A7%E7%94%9F%E6%88%90%E7%9A%84%E4%BB%A3%E7%A0%81">更新模型属性生成的代码<a class="anchor" href="#%E6%9B%B4%E6%96%B0%E6%A8%A1%E5%9E%8B%E5%B1%9E%E6%80%A7%E7%94%9F%E6%88%90%E7%9A%84%E4%BB%A3%E7%A0%81">§</a></h3>\n<blockquote>\n<p>在再次运行该应用之前，我们需要自定义一些已生成的代码。最终这些修复过程将不再需要——但就目前而言，我们需要解决结果未解决的问题。</p>\n</blockquote>\n<p>自动生成的页面，当前并未使用你在生成过程中定义的实际模型的属性。以后会支持，但现在，需要我们手动修复生成的页面。</p>\n<h4 id="question-%E9%A1%B5%E9%9D%A2">Question 页面<a class="anchor" href="#question-%E9%A1%B5%E9%9D%A2">§</a></h4>\n<p>进入 <code>app/pages/questions/index.tsx</code>. 请注意到一个 <code>QuestionsList</code> 组件已经为你生成了：</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token comment">// app/pages/questions/index.tsx</span>\n\n<span class="token keyword module">export</span> <span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">QuestionsList</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token property-access">query</span><span class="token punctuation">.</span><span class="token property-access">page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>questions<span class="token punctuation">,</span> hasMore<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">usePaginatedQuery</span><span class="token punctuation">(</span>getQuestions<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    orderBy<span class="token operator">:</span> <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token string">"asc"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    skip<span class="token operator">:</span> <span class="token constant">ITEMS_PER_PAGE</span> <span class="token operator">*</span> page<span class="token punctuation">,</span>\n    take<span class="token operator">:</span> <span class="token constant">ITEMS_PER_PAGE</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">goToPreviousPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> router<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>query<span class="token operator">:</span> <span class="token punctuation">{</span>page<span class="token operator">:</span> page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">goToNextPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> router<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>query<span class="token operator">:</span> <span class="token punctuation">{</span>page<span class="token operator">:</span> page <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token punctuation">{</span>questions<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">question</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>question<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/questions/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>question<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>question<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>page <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>goToPreviousPage<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        Previous\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token operator">!</span>hasMore<span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>goToNextPage<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        Next\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>不过目前跑不通的！请记住我们创建的 <code>Question</code> 模型上面没有任何“name”字段。\n要解决此问题，请替换 <code>question.name</code> 为 <code>question.text</code>。</p>\n<pre class="language-diff"><code class="language-diff">// app/pages/questions/index.tsx\n\nexport const QuestionsList = () => {\n<span class="token unchanged"><span class="token prefix unchanged"> </span> const router = useRouter()\n<span class="token prefix unchanged"> </span> const page = Number(router.query.page) || 0\n<span class="token prefix unchanged"> </span> const [{questions, hasMore}] = usePaginatedQuery(getQuestions, {\n<span class="token prefix unchanged"> </span>   orderBy: {id: "asc"},\n<span class="token prefix unchanged"> </span>   skip: ITEMS_PER_PAGE * page,\n<span class="token prefix unchanged"> </span>   take: ITEMS_PER_PAGE,\n<span class="token prefix unchanged"> </span> })\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span> const goToPreviousPage = () => router.push({query: {page: page - 1}})\n<span class="token prefix unchanged"> </span> const goToNextPage = () => router.push({query: {page: page + 1}})\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span> return (\n<span class="token prefix unchanged"> </span>   &lt;div>\n<span class="token prefix unchanged"> </span>     &lt;ul>\n<span class="token prefix unchanged"> </span>       {questions.map((question) => (\n<span class="token prefix unchanged"> </span>         &lt;li key={question.id}>\n<span class="token prefix unchanged"> </span>           &lt;Link href={`/questions/${question.id}`}>\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>              &lt;a>{question.name}&lt;/a>\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>              &lt;a>{question.text}&lt;/a>\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span>           &lt;/Link>\n<span class="token prefix unchanged"> </span>         &lt;/li>\n<span class="token prefix unchanged"> </span>       ))}\n<span class="token prefix unchanged"> </span>     &lt;/ul>\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span>     &lt;button disabled={page === 0} onClick={goToPreviousPage}>\n<span class="token prefix unchanged"> </span>       Previous\n<span class="token prefix unchanged"> </span>     &lt;/button>\n<span class="token prefix unchanged"> </span>     &lt;button disabled={!hasMore} onClick={goToNextPage}>\n<span class="token prefix unchanged"> </span>       Next\n<span class="token prefix unchanged"> </span>     &lt;/button>\n<span class="token prefix unchanged"> </span>   &lt;/div>\n<span class="token prefix unchanged"> </span> )\n</span>}\n</code></pre>\n<p>接下来，我们将类似的修复方法应用于 <code>app/questions/components/QuestionForm.tsx</code> 中。在表单提交中，将 <code>LabeledTextField</code> 中 <code>name</code> 变为 <code>text</code>。</p>\n<pre class="language-diff"><code class="language-diff">export function QuestionForm&lt;S extends z.ZodType&lt;any, any>>(\n<span class="token unchanged"><span class="token prefix unchanged"> </span> props: FormProps&lt;S>,\n</span>) {\n<span class="token unchanged"><span class="token prefix unchanged"> </span> return (\n<span class="token prefix unchanged"> </span>   &lt;Form&lt;S> {...props}>\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>     &lt;LabeledTextField name="name" label="Name" placeholder="Name" />\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>     &lt;LabeledTextField name="text" label="Text" placeholder="Text" />\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span>   &lt;/Form>\n<span class="token prefix unchanged"> </span> )\n</span>}\n</code></pre>\n<h4 id="createquestion-mutation"><code>createQuestion</code> mutation<a class="anchor" href="#createquestion-mutation">§</a></h4>\n<p>在 <code>app/questions/mutations/createQuestion.ts</code> 中，我们需要更新 <code>CreateQuestion</code> zod 验证模式，使用 <code>text</code> 而不是 <code>name</code>。</p>\n<pre class="language-diff"><code class="language-diff">// app/questions/mutations/createQuestion.ts\n\nconst CreateQuestion = z\n<span class="token unchanged"><span class="token prefix unchanged"> </span> .object({\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>   name: z.string(),\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>   text: z.string(),\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span> })\n<span class="token prefix unchanged"> </span> .nonstrict()\n</span>// ...\n</code></pre>\n<h4 id="updatequestion-mutation"><code>updateQuestion</code> mutation<a class="anchor" href="#updatequestion-mutation">§</a></h4>\n<p>在 <code>app/questions/mutations/updateQuestion.ts</code> 中，我们需要更新 <code>UpdateQuestion</code> zod 验证模式，使用 <code>text</code> 而不是 <code>name</code>。</p>\n<pre class="language-diff"><code class="language-diff">// app/questions/mutations/updateQuestion.ts\n\nconst UpdateQuestion = z\n<span class="token unchanged"><span class="token prefix unchanged"> </span> .object({\n<span class="token prefix unchanged"> </span>   id: z.number(),\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>   name: z.string(),\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>   text: z.string(),\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span> })\n<span class="token prefix unchanged"> </span> .nonstrict()\n</span>// ...\n</code></pre>\n<h4 id="deletequestion-mutation"><code>deleteQuestion</code> mutation<a class="anchor" href="#deletequestion-mutation">§</a></h4>\n<p>Prisma 尚不支持“级联删除”。在本教程的上下文中，这意味着它在删除 <code>Question</code> 时不会删除相关的 <code>Choice</code>数据。我们需要临时改动生成的 <code>deleteQuestion</code> mutation，以便手动做这件事。在文本编辑框中打开 <code>app/questions/mutations/deleteQuestion.ts</code> 并将以下内容添加到函数主体的顶\n部。</p>\n<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">await</span> db<span class="token punctuation">.</span>choice<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span>where<span class="token operator">:</span> <span class="token punctuation">{</span>questionId<span class="token operator">:</span> id<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n<p>最终的效果应该为：</p>\n<pre class="language-diff"><code class="language-diff">// app/questions/mutations/deleteQuestion.ts\n\nexport default resolver.pipe(\n<span class="token unchanged"><span class="token prefix unchanged"> </span> resolver.zod(DeleteQuestion),\n<span class="token prefix unchanged"> </span> resolver.authorize(),\n<span class="token prefix unchanged"> </span> async ({id}) => {\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>   await db.choice.deleteMany({where: {questionId: id}})\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span>   const question = await db.question.deleteMany({where: {id}})\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span>   return question\n<span class="token prefix unchanged"> </span> },\n</span>)\n</code></pre>\n<p>现在，此 mutation 将在删除问题本身之前，删除与问题相关的选择。</p>\n<h4 id="%E7%8E%B0%E5%9C%A8%E5%B0%9D%E8%AF%95%E5%88%9B%E5%BB%BA%E6%9B%B4%E6%96%B0%E5%92%8C%E5%88%A0%E9%99%A4%E9%97%AE%E9%A2%98">现在尝试创建、更新和删除问题<a class="anchor" href="#%E7%8E%B0%E5%9C%A8%E5%B0%9D%E8%AF%95%E5%88%9B%E5%BB%BA%E6%9B%B4%E6%96%B0%E5%92%8C%E5%88%A0%E9%99%A4%E9%97%AE%E9%A2%98">§</a></h4>\n<p>太棒了！现在确保你的程序正常运行。否则在你的终端中执行 <code>blitz dev</code>，然后访问 <code>localhost:3000/questions</code>。尝试创建问题并编辑、删除它们。</p>\n<h3 id="%E5%9C%A8%E9%97%AE%E9%A2%98%E8%A1%A8%E6%A0%BC%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%80%89%E6%8B%A9%E9%A1%B9">在问题表格中添加选择项<a class="anchor" href="#%E5%9C%A8%E9%97%AE%E9%A2%98%E8%A1%A8%E6%A0%BC%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%80%89%E6%8B%A9%E9%A1%B9">§</a></h3>\n<p>到目前为止，你做的很棒！我们要做的下一件事是在我们的问题中添加选择。在你的编辑器中打开 <code>app/questions/components/QuestionForm.tsx</code>。</p>\n<p>添加另外三个 <code>&lt;LabeledTextField&gt;</code> 组件作为选择。</p>\n<pre class="language-diff"><code class="language-diff">export function QuestionForm&lt;S extends z.ZodType&lt;any, any>>(\n<span class="token unchanged"><span class="token prefix unchanged"> </span> props: FormProps&lt;S>,\n</span>) {\n<span class="token unchanged"><span class="token prefix unchanged"> </span> return (\n<span class="token prefix unchanged"> </span>   &lt;Form&lt;S> {...props}>\n<span class="token prefix unchanged"> </span>     &lt;LabeledTextField name="text" label="Text" placeholder="Text" />\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>     &lt;LabeledTextField name="choices.0.text" label="Choice 1" />\n<span class="token prefix inserted">+</span>     &lt;LabeledTextField name="choices.1.text" label="Choice 2" />\n<span class="token prefix inserted">+</span>     &lt;LabeledTextField name="choices.2.text" label="Choice 3" />\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span>   &lt;/Form>\n<span class="token prefix unchanged"> </span> )\n</span>}\n</code></pre>\n<p>现在打开 <code>app/pages/questions/new.tsx</code> 并设置 <code>initialValues</code> 为如下：</p>\n<pre class="language-diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span>     &lt;QuestionForm\n<span class="token prefix unchanged"> </span>       submitText="Create Question"\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>       // initialValues={{ }}\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>       initialValues={{choices: []}}\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span>       onSubmit={async (values) => {\n<span class="token prefix unchanged"> </span>         try {\n<span class="token prefix unchanged"> </span>           const question = await createQuestionMutation(values)\n<span class="token prefix unchanged"> </span>           router.push(`/questions/${question.id}`)\n<span class="token prefix unchanged"> </span>         } catch (error) {\n<span class="token prefix unchanged"> </span>           console.error(error)\n<span class="token prefix unchanged"> </span>           return {\n<span class="token prefix unchanged"> </span>             [FORM_ERROR]: error.toString(),\n<span class="token prefix unchanged"> </span>           }\n<span class="token prefix unchanged"> </span>         }\n<span class="token prefix unchanged"> </span>       }}\n<span class="token prefix unchanged"> </span>     />\n</span></code></pre>\n<p>接下来打开 <code>app/questions/mutations/createQuestion.ts</code> 并更新 zod 模式，来让 mutation 接收 choice 数据。而且我们还需要更新 <code>db.question.create</code> 调用，以便 choice 也可以被创建。</p>\n<pre class="language-diff"><code class="language-diff">// app/questions/mutations/createQuestion.ts\n\nconst CreateQuestion = z\n<span class="token unchanged"><span class="token prefix unchanged"> </span> .object({\n<span class="token prefix unchanged"> </span>   text: z.string(),\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>   choices: z.array(z.object({text: z.string()})),\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span> })\n<span class="token prefix unchanged"> </span> .nonstrict()\n</span>\nexport default resolver.pipe(\n<span class="token unchanged"><span class="token prefix unchanged"> </span> resolver.zod(CreateQuestion),\n<span class="token prefix unchanged"> </span> resolver.authorize(),\n<span class="token prefix unchanged"> </span> async (input) => {\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>   const question = await db.question.create({data: input})\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>   const question = await db.question.create({\n<span class="token prefix inserted">+</span>     data: {\n<span class="token prefix inserted">+</span>       ...input,\n<span class="token prefix inserted">+</span>       choices: {create: input.choices},\n<span class="token prefix inserted">+</span>     },\n<span class="token prefix inserted">+</span>   })\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span>   return question\n<span class="token prefix unchanged"> </span> },\n</span>)\n</code></pre>\n<h4 id="%E8%AF%95%E8%AF%95%E7%9C%8B">试试看<a class="anchor" href="#%E8%AF%95%E8%AF%95%E7%9C%8B">§</a></h4>\n<p>现在你可以转到 <code>localhost:3000/questions/new</code> 并创建一个带有选择的新问题！</p>\n<h3 id="%E5%88%97%E5%87%BA%E9%80%89%E6%8B%A9">列出选择<a class="anchor" href="#%E5%88%97%E5%87%BA%E9%80%89%E6%8B%A9">§</a></h3>\n<p>该轻松一下了。返回浏览器中的 <code>localhost:3000/questions</code> 并查看你创建的所有问题。让我们在这些问题下列出相关的选择如何？首先，我们需要自定义问题查询函数。在 Prisma 中，你需要手动让客户端知道你需要查询的嵌套关系，将你的 <code>getQuestion.ts</code> 和 <code>getQuestions.ts</code> 文件更改为如下所示：</p>\n<pre class="language-diff"><code class="language-diff">// app/questions/queries/getQuestion.ts\n\nconst GetQuestion = z.object({\n<span class="token unchanged"><span class="token prefix unchanged"> </span> // This accepts type of undefined, but is required at runtime\n<span class="token prefix unchanged"> </span> id: z.number().optional().refine(Boolean, "Required"),\n</span>})\n\nexport default resolver.pipe(\n<span class="token unchanged"><span class="token prefix unchanged"> </span> resolver.zod(GetQuestion),\n<span class="token prefix unchanged"> </span> resolver.authorize(),\n<span class="token prefix unchanged"> </span> async ({id}) => {\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>   const question = await db.question.findFirst({where: {id}})\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>   const question = await db.question.findFirst({\n<span class="token prefix inserted">+</span>     where: {id},\n<span class="token prefix inserted">+</span>     include: {choices: true},\n<span class="token prefix inserted">+</span>   })\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span>   if (!question) throw new NotFoundError()\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span>   return question\n<span class="token prefix unchanged"> </span> },\n</span>)\n</code></pre>\n<pre class="language-diff"><code class="language-diff">// app/questions/queries/getQuestions.ts\n\ninterface GetQuestionsInput\n<span class="token unchanged"><span class="token prefix unchanged"> </span> extends Pick&lt;\n<span class="token prefix unchanged"> </span>   Prisma.QuestionFindManyArgs,\n<span class="token prefix unchanged"> </span>   "where" | "orderBy" | "skip" | "take"\n<span class="token prefix unchanged"> </span> > {}\n</span>\nexport default resolver.pipe(\n<span class="token unchanged"><span class="token prefix unchanged"> </span> resolver.authorize(),\n<span class="token prefix unchanged"> </span> async ({where, orderBy, skip = 0, take = 100}: GetQuestionsInput) => {\n<span class="token prefix unchanged"> </span>   const {items: questions, hasMore, nextPage, count} = await paginate({\n<span class="token prefix unchanged"> </span>     skip,\n<span class="token prefix unchanged"> </span>     take,\n<span class="token prefix unchanged"> </span>     count: () => db.question.count({where}),\n<span class="token prefix unchanged"> </span>     query: (paginateArgs) =>\n<span class="token prefix unchanged"> </span>       db.question.findMany({\n<span class="token prefix unchanged"> </span>         ...paginateArgs,\n<span class="token prefix unchanged"> </span>         where,\n<span class="token prefix unchanged"> </span>         orderBy,\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>         include: {choices: true},\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span>       }),\n<span class="token prefix unchanged"> </span>   })\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span>   return {\n<span class="token prefix unchanged"> </span>     questions,\n<span class="token prefix unchanged"> </span>     nextPage,\n<span class="token prefix unchanged"> </span>     hasMore,\n<span class="token prefix unchanged"> </span>     count,\n<span class="token prefix unchanged"> </span>   }\n<span class="token prefix unchanged"> </span> },\n</span>)\n</code></pre>\n<p>现在在浏览器中跳回我们主要的 Question 页面 (<code>app/pages/questions/index.tsx</code>)，我们可以列出每个问题的选择。并将此代码添加到我们 <code>QuestionsList</code> 中的 <code>Link</code> 下：</p>\n<pre class="language-diff"><code class="language-diff">// app/pages/questions/index.tsx\n\n// ...\n{\n<span class="token unchanged"><span class="token prefix unchanged"> </span> questions.map((question) => (\n<span class="token prefix unchanged"> </span>   &lt;li key={question.id}>\n<span class="token prefix unchanged"> </span>     &lt;Link href={`/questions/${question.id}`}>\n<span class="token prefix unchanged"> </span>       &lt;a>{question.text}&lt;/a>\n<span class="token prefix unchanged"> </span>     &lt;/Link>\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>     &lt;ul>\n<span class="token prefix inserted">+</span>       {question.choices.map((choice) => (\n<span class="token prefix inserted">+</span>         &lt;li key={choice.id}>\n<span class="token prefix inserted">+</span>           {choice.text} - {choice.votes} votes\n<span class="token prefix inserted">+</span>         &lt;/li>\n<span class="token prefix inserted">+</span>       ))}\n<span class="token prefix inserted">+</span>     &lt;/ul>\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span>   &lt;/li>\n<span class="token prefix unchanged"> </span> ))\n</span>}\n// ...\n</code></pre>\n<p>现在在浏览器中访问 <code>/questions</code> 路由。<strong>神奇吧！</strong></p>\n<h3 id="%E8%AE%A9%E6%88%91%E4%BB%AC%E5%85%81%E8%AE%B8%E7%94%A8%E6%88%B7%E5%AF%B9%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E6%8A%95%E7%A5%A8">让我们允许用户对这些问题投票！<a class="anchor" href="#%E8%AE%A9%E6%88%91%E4%BB%AC%E5%85%81%E8%AE%B8%E7%94%A8%E6%88%B7%E5%AF%B9%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E6%8A%95%E7%A5%A8">§</a></h3>\n<p>在浏览器中打开 <code>app/pages/questions/[questionId].tsx</code>。首先，我们将对该页面进行一些改造。</p>\n<ol>\n<li>替换 <code>&lt;h1&gt;Question {question.id}&lt;/h1&gt;</code> 为 <code>&lt;h1&gt;{question.text}&lt;/h1&gt;</code>.</li>\n<li>删除 <code>pre</code> 元素，并将如下复制到之前写的选择列表中：</li>\n</ol>\n<pre class="language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token punctuation">{</span>question<span class="token punctuation">.</span><span class="token property-access">choices</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">choice</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>choice<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>choice<span class="token punctuation">.</span><span class="token property-access">text</span><span class="token punctuation">}</span><span class="token plain-text"> - </span><span class="token punctuation">{</span>choice<span class="token punctuation">.</span><span class="token property-access">votes</span><span class="token punctuation">}</span><span class="token plain-text"> votes\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>如果返回浏览器，页面目前看起来像这样！</p>\n<p><img src="https://cdn.nlark.com/yuque/0/2021/png/86548/1616475118256-6e625fe9-db7f-44ec-9a07-68a3eced32c7.png#align=left&amp;display=inline&amp;height=285&amp;margin=%5Bobject%20Object%5D&amp;originHeight=570&amp;originWidth=1134&amp;size=0&amp;status=done&amp;style=none&amp;width=567" alt=""></p>\n<h3 id="%E7%8E%B0%E5%9C%A8%E6%98%AF%E6%97%B6%E5%80%99%E6%9D%A5%E5%A2%9E%E5%8A%A0%E6%8A%95%E7%A5%A8%E5%8A%9F%E8%83%BD">现在是时候来增加投票功能！<a class="anchor" href="#%E7%8E%B0%E5%9C%A8%E6%98%AF%E6%97%B6%E5%80%99%E6%9D%A5%E5%A2%9E%E5%8A%A0%E6%8A%95%E7%A5%A8%E5%8A%9F%E8%83%BD">§</a></h3>\n<p>首先我们需要打开 <code>app/choices/mutations/updateChoice.ts</code>，更新 zod 模式，添加新增投票功能。</p>\n<pre class="language-diff"><code class="language-diff">const UpdateChoice = z\n<span class="token unchanged"><span class="token prefix unchanged"> </span> .object({\n<span class="token prefix unchanged"> </span>   id: z.number(),\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>   name: z.string(),\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span> })\n<span class="token prefix unchanged"> </span> .nonstrict()\n</span>\nexport default resolver.pipe(\n<span class="token unchanged"><span class="token prefix unchanged"> </span> resolver.zod(UpdateChoice),\n<span class="token prefix unchanged"> </span> resolver.authorize(),\n<span class="token prefix unchanged"> </span> async ({id, ...data}) => {\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>   const choice = await db.choice.update({where: {id}, data})\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>   const choice = await db.choice.update({\n<span class="token prefix inserted">+</span>     where: {id},\n<span class="token prefix inserted">+</span>     data: {votes: {increment: 1}},\n<span class="token prefix inserted">+</span>   })\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span>   return choice\n<span class="token prefix unchanged"> </span> },\n</span>)\n</code></pre>\n<p>返回到 <code>app/pages/questions/[questionId].tsx</code> 中进行如下更改：</p>\n<p>在我们的 <code>li</code> 中，新增一个如下的 <code>button</code>：</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>choice<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token punctuation">{</span>choice<span class="token punctuation">.</span><span class="token property-access">text</span><span class="token punctuation">}</span><span class="token plain-text"> - </span><span class="token punctuation">{</span>choice<span class="token punctuation">.</span><span class="token property-access">votes</span><span class="token punctuation">}</span><span class="token plain-text"> votes\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">Vote</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>接下来，导入我们更新的 <code>updateChoice</code> mutation，并在页面中创建 <code>handleVote</code> 函数。</p>\n<pre class="language-diff"><code class="language-diff">// app/pages/questions/[questionId].tsx\n<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>import updateChoice from "app/choices/mutations/updateChoice"\n</span>\n//...\n\nexport const Question = () => {\n<span class="token unchanged"><span class="token prefix unchanged"> </span> const router = useRouter()\n<span class="token prefix unchanged"> </span> const questionId = useParam("questionId", "number")\n<span class="token prefix unchanged"> </span> const [deleteQuestionMutation] = useMutation(deleteQuestion)\n<span class="token prefix unchanged"> </span> const [question] = useQuery(getQuestion, {id: questionId})\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span> const [updateChoiceMutation] = useMutation(updateChoice)\n<span class="token prefix inserted">+</span>\n<span class="token prefix inserted">+</span> const handleVote = async (id: number) => {\n<span class="token prefix inserted">+</span>   try {\n<span class="token prefix inserted">+</span>     await updateChoiceMutation({id})\n<span class="token prefix inserted">+</span>     refetch()\n<span class="token prefix inserted">+</span>   } catch (error) {\n<span class="token prefix inserted">+</span>     alert("Error updating choice " + JSON.stringify(error, null, 2))\n<span class="token prefix inserted">+</span>   }\n<span class="token prefix inserted">+</span> }\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span> return (\n</span></code></pre>\n<p>然后我们需要更新问题相关的 <code>useQuery</code> 调用以返回需要在 <code>handleVote</code> 内部使用的 <code>refetch</code> 函数。</p>\n<pre class="language-diff"><code class="language-diff">// app/pages/questions/[questionId].tsx\n\n//...\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span> const [question] = useQuery(getQuestion, {id: questionId})\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span> const [question, {refetch}] = useQuery(getQuestion, {id: questionId})\n</span>//...\n</code></pre>\n<p>最后，我们将告诉新的 <code>button</code> 来条用该函数！</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">handleVote</span><span class="token punctuation">(</span>choice<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Vote</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n</code></pre>\n<p>最终的 <code>Question</code> 组件应该是这个样子：</p>\n<pre class="language-jsx"><code class="language-jsx"><span class="token keyword module">export</span> <span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">Question</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> questionId <span class="token operator">=</span> <span class="token function">useParam</span><span class="token punctuation">(</span><span class="token string">"questionId"</span><span class="token punctuation">,</span> <span class="token string">"number"</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>deleteQuestionMutation<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span>deleteQuestion<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>question<span class="token punctuation">,</span> <span class="token punctuation">{</span>refetch<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span>getQuestion<span class="token punctuation">,</span> <span class="token punctuation">{</span>id<span class="token operator">:</span> questionId<span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>updateChoiceMutation<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span>updateChoice<span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">handleVote</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>\n      <span class="token keyword control-flow">await</span> <span class="token function">updateChoiceMutation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token function">refetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Error updating choice "</span> <span class="token operator">+</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Head</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token plain-text">Question </span><span class="token punctuation">{</span>question<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Head</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>question<span class="token punctuation">.</span><span class="token property-access">text</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">\n          </span><span class="token punctuation">{</span>question<span class="token punctuation">.</span><span class="token property-access">choices</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">choice</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>choice<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n              </span><span class="token punctuation">{</span>choice<span class="token punctuation">.</span><span class="token property-access">text</span><span class="token punctuation">}</span><span class="token plain-text"> - </span><span class="token punctuation">{</span>choice<span class="token punctuation">.</span><span class="token property-access">votes</span><span class="token punctuation">}</span><span class="token plain-text"> votes\n              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">handleVote</span><span class="token punctuation">(</span>choice<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">Vote</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/questions/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>question<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/edit</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token plain-text">Edit</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n\n        &lt;button\n          type="button"\n          onClick=</span><span class="token punctuation">{</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token method function property-access">confirm</span><span class="token punctuation">(</span><span class="token string">"This will be deleted"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword control-flow">await</span> <span class="token function">deleteQuestionMutation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>id<span class="token operator">:</span> question<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n              router<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token string">"/questions"</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token plain-text">\n          style=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>marginLeft<span class="token operator">:</span> <span class="token string">"0.5rem"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token plain-text">\n        >\n          Delete\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h3 id="%E6%9C%80%E5%90%8E%E8%AE%A9%E6%88%91%E4%BB%AC%E6%94%AF%E6%8C%81%E7%BC%96%E8%BE%91%E6%9F%90%E9%97%AE%E9%A2%98%E4%B8%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E9%80%89%E6%8B%A9">最后，让我们支持编辑某问题下的一个选择<a class="anchor" href="#%E6%9C%80%E5%90%8E%E8%AE%A9%E6%88%91%E4%BB%AC%E6%94%AF%E6%8C%81%E7%BC%96%E8%BE%91%E6%9F%90%E9%97%AE%E9%A2%98%E4%B8%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E9%80%89%E6%8B%A9">§</a></h3>\n<p>如果单击现有问题之一上的“编辑”按钮，你将看到它使用与创建问题相同的形式。至\n此，该部分已经完成！我们只需要更新我们的 mutation。</p>\n<p>打开 <code>app/questions/mutations/updateQuestion.ts</code> 并进行如下改动：</p>\n<pre class="language-diff"><code class="language-diff">// app/questions/mutations/updateQuestion.ts\nimport {resolver} from "blitz"\nimport db from "db"\nimport * as z from "zod"\n\nconst UpdateQuestion = z\n<span class="token unchanged"><span class="token prefix unchanged"> </span> .object({\n<span class="token prefix unchanged"> </span>   id: z.number(),\n<span class="token prefix unchanged"> </span>   text: z.string(),\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>   choices: z.array(\n<span class="token prefix inserted">+</span>     z.object({id: z.number().optional(), text: z.string()}).nonstrict(),\n<span class="token prefix inserted">+</span>   ),\n</span><span class="token unchanged"><span class="token prefix unchanged"> </span> })\n<span class="token prefix unchanged"> </span> .nonstrict()\n</span>\nexport default resolver.pipe(\n<span class="token unchanged"><span class="token prefix unchanged"> </span> resolver.zod(UpdateQuestion),\n<span class="token prefix unchanged"> </span> resolver.authorize(),\n<span class="token prefix unchanged"> </span> async ({id, ...data}) => {\n</span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span>   const question = await db.question.update({where: {id}, data})\n</span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span>   const question = await db.question.update({\n<span class="token prefix inserted">+</span>     where: {id},\n<span class="token prefix inserted">+</span>     data: {\n<span class="token prefix inserted">+</span>       ...data,\n<span class="token prefix inserted">+</span>       choices: {\n<span class="token prefix inserted">+</span>         upsert: data.choices.map((choice) => ({\n<span class="token prefix inserted">+</span>           // Appears to be a prisma bug,\n<span class="token prefix inserted">+</span>           // because `|| 0` shouldn\'t be needed\n<span class="token prefix inserted">+</span>           where: {id: choice.id || 0},\n<span class="token prefix inserted">+</span>           create: {text: choice.text},\n<span class="token prefix inserted">+</span>           update: {text: choice.text},\n<span class="token prefix inserted">+</span>         })),\n<span class="token prefix inserted">+</span>       },\n<span class="token prefix inserted">+</span>     },\n<span class="token prefix inserted">+</span>   })\n</span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span>   return question\n<span class="token prefix unchanged"> </span> },\n</span>)\n</code></pre>\n<p><code>[upsert](https://www.prisma.io/docs/reference/api-reference/prisma-client-reference#upsert)</code> 是一种特殊的操作，表示“如果存在此项目，请对其进行更新。否则创建它”。这对于\n当前情况是完美的，因为我们不需要用户在创建问题时同时添加三个选择。所以如果\n用户通过编辑问题添加另一个选择，则将在此处创建它。</p>\n<h3 id="%E7%BB%93%E5%B0%BE">结尾<a class="anchor" href="#%E7%BB%93%E5%B0%BE">§</a></h3>\n<p>🥳 恭喜！你创建了自己的 Blitz 应用！祝你玩得开心，也欢迎与你的朋友分享。现在，你已经完成了本教程，为什么不尝试使你的投票应用变得更好呢？你可以尝试：</p>\n<ul>\n<li>添加样式 (提示, 试试 <code>blitz install tailwind</code> 或 <code>blitz install chakra-ui</code>)</li>\n<li>显示更多有关选票的统计信息</li>\n<li>在 Render 或 Vercel 上实时部署。</li>\n</ul>\n<p>如果你想与全球 Blitz 社区分享你的项目，没有比 Discord 更好的地方了。</p>\n<p>访问 <a href="https://discord.blitzjs.com">discord.blitzjs.com</a>。然后，将连接发布到 <strong>#built-with-blitz</strong> 频道来与所有人共享！</p>\n<h2 id="%E8%AF%91%E8%80%85%E7%BB%93%E8%AF%AD">译者结语<a class="anchor" href="#%E8%AF%91%E8%80%85%E7%BB%93%E8%AF%AD">§</a></h2>\n<p>本文内容属于 <a href="https://blitzjs.com/docs">Blitz.js 官方文档</a> - 简介章节的前半部分。总共十四个章节（简介、社区、基础、页面、路由、权限、数据库、Queries 和 Mutations、后端架构、部署、配方、配置、CLI 和模板）。未来不定期翻译其余章节，也可能会原创一些文章。</p>\n<p>《<a href="https://github.com/hylerrix/blitzjs-tutorial">Blitz.js + React 全栈开发手册</a>》系列专注探索 Blitz.js + React 全栈应用开发，原文翻译内容会同步更新到 <a href="https://github.com/blitz-js/zh-hans.blitzjs.com">Blitz.js 中文仓库</a> 上。欢迎 Star、Watch 或关注公众号 (@ningowood) 来及时接收消息。</p>\n<blockquote>\n<p>2021 © <a href="https://github.com/hylerrix/blitzjs-tutorial">https://github.com/hylerrix/blitzjs-tutorial</a></p>\n</blockquote>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E8%AF%91%E8%80%85%E5%BA%8F" }, "\u8BD1\u8005\u5E8F")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%BF%AB%E9%80%9F%E5%85%A5%E6%89%8B" }, "\u5FEB\u901F\u5165\u624B"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84%E7%8E%AF%E5%A2%83" }, "\u914D\u7F6E\u4F60\u7684\u73AF\u5883")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%AE%89%E8%A3%85-blitz" }, "\u5B89\u88C5 Blitz")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E9%A1%B9%E7%9B%AE" }, "\u521B\u5EFA\u4E00\u4E2A\u65B0\u9879\u76EE")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0-blitz-%E7%A4%BE%E5%8C%BA-%F0%9F%91%8B" }, "\u6B22\u8FCE\u6765\u5230 Blitz \u793E\u533A \uD83D\uDC4B")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%B8%8B%E4%B8%80%E6%AD%A5" }, "\u4E0B\u4E00\u6B65"),
                        React.createElement("ol", null)))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B" }, "\u5165\u95E8\u6559\u7A0B"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E5%BA%94%E7%94%A8" }, "\u521B\u5EFA\u4E00\u4E2A\u65B0\u5E94\u7528")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%9C%8D%E5%8A%A1%E5%99%A8" }, "\u5F00\u53D1\u73AF\u5883\u670D\u52A1\u5668")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%BB%A5%E7%94%A8%E6%88%B7%E8%BA%AB%E4%BB%BD%E6%B3%A8%E5%86%8C" }, "\u4EE5\u7528\u6237\u8EAB\u4EFD\u6CE8\u518C")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E7%BC%96%E5%86%99%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2" }, "\u7F16\u5199\u4F60\u7684\u7B2C\u4E00\u4E2A\u9875\u9762")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE" }, "\u6570\u636E\u5E93\u914D\u7F6E")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6%E4%BB%A3%E7%A0%81" }, "\u6A21\u578B\u7684\u811A\u624B\u67B6\u4EE3\u7801"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E8%AE%BF%E9%97%AE-prisma-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%A2%E6%88%B7%E7%AB%AF" }, "\u8BBF\u95EE Prisma \u6570\u636E\u5E93\u5BA2\u6237\u7AEF")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%9B%B4%E6%96%B0%E6%A8%A1%E5%9E%8B%E5%B1%9E%E6%80%A7%E7%94%9F%E6%88%90%E7%9A%84%E4%BB%A3%E7%A0%81" }, "\u66F4\u65B0\u6A21\u578B\u5C5E\u6027\u751F\u6210\u7684\u4EE3\u7801"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%9C%A8%E9%97%AE%E9%A2%98%E8%A1%A8%E6%A0%BC%E4%B8%AD%E6%B7%BB%E5%8A%A0%E9%80%89%E6%8B%A9%E9%A1%B9" }, "\u5728\u95EE\u9898\u8868\u683C\u4E2D\u6DFB\u52A0\u9009\u62E9\u9879"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%88%97%E5%87%BA%E9%80%89%E6%8B%A9" }, "\u5217\u51FA\u9009\u62E9")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E8%AE%A9%E6%88%91%E4%BB%AC%E5%85%81%E8%AE%B8%E7%94%A8%E6%88%B7%E5%AF%B9%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E6%8A%95%E7%A5%A8" }, "\u8BA9\u6211\u4EEC\u5141\u8BB8\u7528\u6237\u5BF9\u8FD9\u4E9B\u95EE\u9898\u6295\u7968\uFF01")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E7%8E%B0%E5%9C%A8%E6%98%AF%E6%97%B6%E5%80%99%E6%9D%A5%E5%A2%9E%E5%8A%A0%E6%8A%95%E7%A5%A8%E5%8A%9F%E8%83%BD" }, "\u73B0\u5728\u662F\u65F6\u5019\u6765\u589E\u52A0\u6295\u7968\u529F\u80FD\uFF01")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%9C%80%E5%90%8E%E8%AE%A9%E6%88%91%E4%BB%AC%E6%94%AF%E6%8C%81%E7%BC%96%E8%BE%91%E6%9F%90%E9%97%AE%E9%A2%98%E4%B8%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E9%80%89%E6%8B%A9" }, "\u6700\u540E\uFF0C\u8BA9\u6211\u4EEC\u652F\u6301\u7F16\u8F91\u67D0\u95EE\u9898\u4E0B\u7684\u4E00\u4E2A\u9009\u62E9")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E7%BB%93%E5%B0%BE" }, "\u7ED3\u5C3E")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E8%AF%91%E8%80%85%E7%BB%93%E8%AF%AD" }, "\u8BD1\u8005\u7ED3\u8BED")))),
    'author': "hylerrix",
    'contributors': [
        "hylerrix"
    ],
    'date': "2021-03-23T07:13:02.000Z",
    'updated': null,
    'excerpt': "译者序 苦 JS 生态久已。在 2020 年后，一直徘徊于该为自己构建怎样的技术栈，迟迟没有太多落地成果——库太多了，一个小场景就能有很多个解决方案；方向也太多了，哪怕大前端三个字，现今都能拆分为很多的细分领域。直到遇到了...",
    'cover': "https://cdn.nlark.com/yuque/0/2021/png/86548/1616475118256-6e625fe9-db7f-44ec-9a07-68a3eced32c7.png#align=left&display=inline&height=285&margin=%5Bobject%20Object%5D&originHeight=570&originWidth=1134&size=0&status=done&style=none&width=567",
    'sidebar': [
        {
            "link": "articles/blitz/README.md",
            "title": "Blitz.js 篇",
            "children": [],
            "text": "articles/blitz/README.md"
        },
        {
            "link": "articles/blitz/README.md",
            "title": "探索篇",
            "children": [
                {
                    "text": "深入浅出 Create React App",
                    "link": "articles/explore/create-react-app-intro.html",
                    "pagePath": "articles/explore/create-react-app-intro.md"
                },
                {
                    "text": "欲取代绝大多 JavaScript 工具链？Rome 尝鲜",
                    "link": "articles/explore/javascript-toolchain-rome.html",
                    "pagePath": "articles/explore/javascript-toolchain-rome.md"
                }
            ],
            "text": "articles/blitz/README.md"
        }
    ]
};
